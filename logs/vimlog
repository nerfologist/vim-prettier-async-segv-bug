
sourcing "vimrc"
line 1: set nocompatible
line 2: 
line 3: " vundle configuration START
line 4: filetype off
Searching for "ftoff.vim" in "/Users/marco/.vim,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/marco/.vim/after"
Searching for "/Users/marco/.vim/ftoff.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/ftoff.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/ftoff.vim"
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 4: sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/ftoff.vim"
line 1: " Vim support file to switch off detection of file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last change:^I2001 Jun 11
line 5: 
line 6: if exists("did_load_filetypes")
line 7:   unlet did_load_filetypes
line 8: endif
line 9: 
line 10: " Remove all autocommands in the filetypedetect group
line 11: silent! au! filetypedetect *
Error detected while processing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/ftoff.vim:
line   11:
E216: No such group or event: filetypedetect *
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/ftoff.vim
continuing in /Users/marco/repos/vim-prettier-bug/vimrc
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after/ftoff.vim"
Searching for "/Users/marco/.vim/after/ftoff.vim"
line 5: 
line 6: set rtp+=~/.vim/bundle/Vundle.vim
line 7: call vundle#begin()
Searching for "autoload/vundle.vim" in "/Users/marco/.vim,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/marco/.vim/after,/Users/marco/.vim/bundle/Vundle.vim"
Searching for "/Users/marco/.vim/autoload/vundle.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/autoload/vundle.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/autoload/vundle.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after/autoload/vundle.vim"
Searching for "/Users/marco/.vim/after/autoload/vundle.vim"
Searching for "/Users/marco/.vim/bundle/Vundle.vim/autoload/vundle.vim"
chdir(/Users/marco/.vim/bundle/Vundle.vim/autoload)
fchdir() to previous dir
line 7: sourcing "/Users/marco/.vim/bundle/Vundle.vim/autoload/vundle.vim"
line 1: " Vundle        is a shortcut for Vim Bundle and Is a simple plugin manager for Vim
line 2: " Author:       gmarik
line 3: " HomePage:     http://github.com/VundleVim/Vundle.vim
line 4: " Readme:       http://github.com/VundleVim/Vundle.vim/blob/master/README.md
line 5: " Version:      0.10.2
line 6: 
line 7: " Plugin Commands
line 9: com! -nargs=+  -bar   Plugin call vundle#config#bundle(<args>)
line 10: 
line 12: com! -nargs=* -bang -complete=custom,vundle#scripts#complete PluginInstall call vundle#installer#new('!' == '<bang>', <f-args>)
line 13: 
line 15: com! -nargs=? -bang -complete=custom,vundle#scripts#complete PluginSearch call vundle#scripts#all('!' == '<bang>', <q-args>)
line 16: 
line 18: com! -nargs=0 -bang PluginList call vundle#installer#list('!' == '<bang>')
line 19: 
line 21: com! -nargs=? -bang   PluginClean call vundle#installer#clean('!' == '<bang>')
line 22: 
line 24: com! -nargs=0         PluginDocs call vundle#installer#helptags(g:vundle#bundles)
line 25: 
line 26: " Aliases
line 27: com! -nargs=* -complete=custom,vundle#scripts#complete PluginUpdate PluginInstall! <args>
line 28: 
line 29: " Vundle Aliases
line 30: com! -nargs=? -bang -complete=custom,vundle#scripts#complete VundleInstall PluginInstall<bang> <args>
line 31: com! -nargs=? -bang -complete=custom,vundle#scripts#complete VundleSearch  PluginSearch<bang> <args>
line 32: com! -nargs=? -bang                                          VundleClean   PluginClean<bang>
line 33: com! -nargs=0                                                VundleDocs    PluginDocs
line 34: com!                                                         VundleUpdate  PluginInstall!
line 35: com! -nargs=*       -complete=custom,vundle#scripts#complete VundleUpdate  PluginInstall! <args>
line 36: 
line 37: " Deprecated Commands
line 38: com! -nargs=+                                                Bundle        call vundle#config#bundle(<args>)
line 39: com! -nargs=? -bang -complete=custom,vundle#scripts#complete BundleInstall PluginInstall<bang> <args>
line 40: com! -nargs=? -bang -complete=custom,vundle#scripts#complete BundleSearch  PluginSearch<bang> <args>
line 41: com! -nargs=0 -bang                                          BundleList    PluginList<bang>
line 42: com! -nargs=? -bang                                          BundleClean   PluginClean<bang>
line 43: com! -nargs=0                                                BundleDocs    PluginDocs
line 44: com!                                                         BundleUpdate  PluginInstall!
line 45: 
line 46: " Set up the signs used in the installer window. (See :help signs)
line 47: if (has('signs'))
line 48:   sign define Vu_error    text=!  texthl=Error
line 49:   sign define Vu_active   text=>  texthl=Comment
line 50:   sign define Vu_todate   text=.  texthl=Comment
line 51:   sign define Vu_new      text=+  texthl=Comment
line 52:   sign define Vu_updated  text=*  texthl=Comment
line 53:   sign define Vu_deleted  text=-  texthl=Comment
line 54:   sign define Vu_helptags text=*  texthl=Comment
line 55:   sign define Vu_pinned   text==  texthl=Comment
line 56: endif
line 57: 
line 58: " Set up Vundle.  This function has to be called from the users vimrc file.
line 59: " This will force Vim to source this file as a side effect which wil define
line 60: " the :Plugin command.  After calling this function the user can use the
line 61: " :Plugin command in the vimrc.  It is not possible to do this automatically
line 62: " because when loading the vimrc file no plugins where loaded yet.
line 63: func! vundle#rc(...) abort
line 69: 
line 70: " Alternative to vundle#rc, offers speed up by modifying rtp only when end()
line 71: " called later.
line 72: func! vundle#begin(...) abort
line 76: 
line 77: " Finishes putting plugins on the rtp.
line 78: func! vundle#end(...) abort
line 82: 
line 83: " Initialize some global variables used by Vundle.
line 84: let vundle#bundle_dir = expand('$HOME/.vim/bundle', 1)
line 85: let vundle#bundles = []
line 86: let vundle#lazy_load = 0
line 87: let vundle#log = []
line 88: let vundle#updated_bundles = []
line 89: 
line 90: " vim: set expandtab sts=2 ts=2 sw=2 tw=78 norl:
finished sourcing /Users/marco/.vim/bundle/Vundle.vim/autoload/vundle.vim
continuing in /Users/marco/repos/vim-prettier-bug/vimrc
calling function vundle#begin()

line 1:   let g:vundle#lazy_load = 1
line 2:   call call('vundle#rc', a:000)
calling function vundle#begin[2]..vundle#rc()

line 1:   if a:0 > 0
line 2:     let g:vundle#bundle_dir = expand(a:1, 1)
line 3:   endif
line 4:   call vundle#config#init()
Searching for "autoload/vundle/config.vim" in "/Users/marco/.vim,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/marco/.vim/after,/Users/marco/.vim/bundle/Vundle.vim"
Searching for "/Users/marco/.vim/autoload/vundle/config.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/autoload/vundle/config.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/autoload/vundle/config.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after/autoload/vundle/config.vim"
Searching for "/Users/marco/.vim/after/autoload/vundle/config.vim"
Searching for "/Users/marco/.vim/bundle/Vundle.vim/autoload/vundle/config.vim"
chdir(/Users/marco/.vim/bundle/Vundle.vim/autoload/vundle)
fchdir() to previous dir
line 4: sourcing "/Users/marco/.vim/bundle/Vundle.vim/autoload/vundle/config.vim"
line 1: " ---------------------------------------------------------------------------
line 2: " Add a plugin to the runtimepath.
line 3: "
line 4: " arg    -- a string specifying the plugin
line 5: " ...    -- a dictionary of options for the plugin
line 6: " return -- the return value from vundle#config#init_bundle()
line 7: " ---------------------------------------------------------------------------
line 8: func! vundle#config#bundle(arg, ...)
line 23: 
line 24: 
line 25: " ---------------------------------------------------------------------------
line 26: "  When lazy bundle load is used (begin/end functions), add all configured
line 27: "  bundles to runtimepath and reorder appropriately.
line 28: " ---------------------------------------------------------------------------
line 29: func! vundle#config#activate_bundles()
line 33: 
line 34: 
line 35: " ---------------------------------------------------------------------------
line 36: " Initialize Vundle.
line 37: "
line 38: " Start a new bundles list and make sure the runtimepath does not contain
line 39: " directories from a previous call. In theory, this should only be called
line 40: " once.
line 41: " ---------------------------------------------------------------------------
line 42: func! vundle#config#init()
line 48: 
line 49: 
line 50: " ---------------------------------------------------------------------------
line 51: " Add a list of bundles to the runtimepath and source them.
line 52: "
line 53: " bundles -- a list of bundle objects
line 54: " ---------------------------------------------------------------------------
line 55: func! vundle#config#require(bundles) abort
line 66: 
line 67: 
line 68: " ---------------------------------------------------------------------------
line 69: " Create a bundle object from a bundle specification.
line 70: "
line 71: " name   -- the bundle specification as a string
line 72: " opts   -- the options dictionary from then bundle definition
line 73: " return -- an initialized bundle object
line 74: " ---------------------------------------------------------------------------
line 75: func! vundle#config#init_bundle(name, opts)
line 84: 
line 85: 
line 86: " ---------------------------------------------------------------------------
line 87: " Check if the current bundle name has already been used in this running
line 88: " instance and show an error to that effect.
line 89: "
line 90: " bundle -- a bundle object whose name is to be checked
line 91: " return -- 0 if the bundle's name has been seen before, 1 otherwise
line 92: " ---------------------------------------------------------------------------
line 93: funct! s:check_bundle_name(bundle)
line 107: 
line 108: 
line 109: " ---------------------------------------------------------------------------
line 110: " Parse the options which can be supplied with the bundle specification.
line 111: " Corresponding documentation: vundle-plugins-configure
line 112: "
line 113: " opts   -- a dictionary with the user supplied options for the bundle
line 114: " return -- a dictionary with the user supplied options for the bundle, this
line 115: "           will be merged with a s:bundle object into one dictionary.
line 116: " ---------------------------------------------------------------------------
line 117: func! s:parse_options(opts)
line 127: 
line 128: 
line 129: " ---------------------------------------------------------------------------
line 130: " Parse the plugin specification.  Corresponding documentation:
line 131: " vundle-plugins-uris
line 132: "
line 133: " arg    -- the string supplied to identify the plugin
line 134: " return -- a dictionary with the folder name (key 'name') and the uri (key
line 135: "           'uri') for cloning the plugin  and the original argument (key
line 136: "           'name_spec')
line 137: " ---------------------------------------------------------------------------
line 138: func! s:parse_name(arg)
line 160: 
line 161: 
line 162: " ---------------------------------------------------------------------------
line 163: "  Modify the runtimepath, after all bundles have been added, so that the
line 164: "  directories that were in the default runtimepath appear first in the list
line 165: "  (with their 'after' directories last).
line 166: " ---------------------------------------------------------------------------
line 167: func! s:rtp_add_defaults()
line 179: 
line 180: 
line 181: " ---------------------------------------------------------------------------
line 182: " Remove all paths for the plugins which are managed by Vundle from the
line 183: " runtimepath.
line 184: " ---------------------------------------------------------------------------
line 185: func! s:rtp_rm_a()
line 192: 
line 193: 
line 194: " ---------------------------------------------------------------------------
line 195: " Add all paths for the plugins which are managed by Vundle to the
line 196: " runtimepath.
line 197: " ---------------------------------------------------------------------------
line 198: func! s:rtp_add_a()
line 205: 
line 206: 
line 207: " ---------------------------------------------------------------------------
line 208: " Remove a directory and the corresponding 'after' directory from runtimepath.
line 209: "
line 210: " dir    -- the directory name to be removed as a string.  The corresponding
line 211: "           'after' directory will also be removed.
line 212: " ---------------------------------------------------------------------------
line 213: func! s:rtp_rm(dir) abort
line 217: 
line 218: 
line 219: " ---------------------------------------------------------------------------
line 220: " Add a directory and the corresponding 'after' directory to runtimepath.
line 221: "
line 222: " dir    -- the directory name to be added as a string.  The corresponding
line 223: "           'after' directory will also be added.
line 224: " ---------------------------------------------------------------------------
line 225: func! s:rtp_add(dir) abort
line 229: 
line 230: 
line 231: " ---------------------------------------------------------------------------
line 232: " Expand and simplify a path.
line 233: "
line 234: " path   -- the path to expand as a string
line 235: " return -- the expanded and simplified path
line 236: " ---------------------------------------------------------------------------
line 237: func! s:expand_path(path) abort
line 240: 
line 241: 
line 242: " ---------------------------------------------------------------------------
line 243: " Find the actual path inside a bundle directory to be added to the
line 244: " runtimepath.  It might be provided by the user with the 'rtp' option.
line 245: " Corresponding documentation: vundle-plugins-configure
line 246: "
line 247: " opts   -- a bundle dict
line 248: " return -- expanded path to the corresponding plugin directory
line 249: " ---------------------------------------------------------------------------
line 250: func! s:rtpath(opts)
line 253: 
line 254: 
line 255: " ---------------------------------------------------------------------------
line 256: " a bundle 'object'
line 257: " ---------------------------------------------------------------------------
line 258: let s:bundle = {}
line 259: 
line 260: 
line 261: " ---------------------------------------------------------------------------
line 262: " Return the absolute path to the directory inside the bundle directory
line 263: " (prefix) where thr bundle will be cloned.
line 264: "
line 265: " return -- the target location to clone this bundle to
line 266: " ---------------------------------------------------------------------------
line 267: func! s:bundle.path()
line 270: 
line 271: 
line 272: " ---------------------------------------------------------------------------
line 273: "  Determine if the bundle has the pinned attribute set in the config
line 274: "
line 275: "  return -- 1 if the bundle is pinned, 0 otherwise
line 276: " ---------------------------------------------------------------------------
line 277: func! s:bundle.is_pinned()
line 280: 
line 281: " vim: set expandtab sts=2 ts=2 sw=2 tw=78 norl:
finished sourcing /Users/marco/.vim/bundle/Vundle.vim/autoload/vundle/config.vim
continuing in function vundle#begin[2]..vundle#rc
calling function vundle#begin[2]..vundle#rc[4]..vundle#config#init()

line 1:   if !exists('g:vundle#bundles') | let g:vundle#bundles = [] | endif
line 1:  let g:vundle#bundles = [] | endif
line 1:  endif
line 2:   call s:rtp_rm_a()
calling function vundle#begin[2]..vundle#rc[4]..vundle#config#init[2]..<SNR>4_rtp_rm_a()

line 1:   let paths = map(copy(g:vundle#bundles), 'v:val.rtpath')
line 2:   let prepends = join(paths, ',')
line 3:   let appends = join(paths, '/after,').'/after'
line 4:   exec 'set rtp-='.fnameescape(prepends)
line 4: set rtp-=
line 5:   exec 'set rtp-='.fnameescape(appends)
line 5: set rtp-=/after
function vundle#begin[2]..vundle#rc[4]..vundle#config#init[2]..<SNR>4_rtp_rm_a returning #0

continuing in function vundle#begin[2]..vundle#rc[4]..vundle#config#init

line 3:   let g:vundle#bundles = []
line 4:   let s:bundle_names = {}
function vundle#begin[2]..vundle#rc[4]..vundle#config#init returning #0

continuing in function vundle#begin[2]..vundle#rc

function vundle#begin[2]..vundle#rc returning #0

continuing in function vundle#begin

function vundle#begin returning #0

continuing in /Users/marco/repos/vim-prettier-bug/vimrc

line 8: 
line 9: " formatter
line 10: Plugin 'prettier/vim-prettier'
line 10: call vundle#config#bundle('prettier/vim-prettier')
calling function vundle#config#bundle('prettier/vim-prettier')

line 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)
calling function vundle#config#bundle[1]..vundle#config#init_bundle('prettier/vim-prettier', [])

line 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')
line 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"
line 3:   endif
line 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')
calling function vundle#config#bundle[1]..vundle#config#init_bundle[4]..<SNR>4_parse_options([])

line 1:   " TODO: improve this
line 2:   if len(a:opts) != 1 | return {} | endif
line 2:  return {} | endif
function vundle#config#bundle[1]..vundle#config#init_bundle[4]..<SNR>4_parse_options returning {}

continuing in function vundle#config#bundle[1]..vundle#config#init_bundle

calling function vundle#config#bundle[1]..vundle#config#init_bundle[4]..<SNR>4_parse_name('prettier/vim-prettier')

line 1:   let arg = a:arg
line 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'
line 3: 
line 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'
line 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1]
line 7:     if uri !~? '\.git$'
line 8:       let uri .= '.git'
line 9:     endif
line 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')
line 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'
line 14:     let uri = arg
line 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1]
line 16:   else
line 17:     let name = arg
line 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'
line 19:   endif
line 20:   return {'name': name, 'uri': uri, 'name_spec': arg }
function vundle#config#bundle[1]..vundle#config#init_bundle[4]..<SNR>4_parse_name returning {'uri': 'https://github.com/prettier/v..., 'name_spec': 'prettier/vim-prettier'}

continuing in function vundle#config#bundle[1]..vundle#config#init_bundle

line 5:   let b = extend(opts, copy(s:bundle))
line 6:   let b.rtpath = s:rtpath(opts)
calling function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>4_rtpath({'uri': 'https://github.com/prettier/v...r/vim-prettier', 'path': function('1')})

line 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()
calling function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>4_rtpath[1]..1()

line 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name
calling function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>4_rtpath[1]..1[1]..<SNR>4_expand_path('/Users/marco/.vim/bundle/')

line 1:   return simplify(expand(a:path, 1))
function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>4_rtpath[1]..1[1]..<SNR>4_expand_path returning '/Users/marco/.vim/bundle/'

continuing in function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>4_rtpath[1]..1

function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>4_rtpath[1]..1 returning '/Users/marco/.vim/bundle/vim-prettier'

continuing in function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>4_rtpath

function vundle#config#bundle[1]..vundle#config#init_bundle[6]..<SNR>4_rtpath returning '/Users/marco/.vim/bundle/vim-prettier'

continuing in function vundle#config#bundle[1]..vundle#config#init_bundle

line 7:   return b
function vundle#config#bundle[1]..vundle#config#init_bundle returning {'uri': 'https://github.com/prettier/v...r/vim-prettier', 'path': function('1')}

continuing in function vundle#config#bundle

line 2:   if !s:check_bundle_name(bundle)
calling function vundle#config#bundle[2]..<SNR>4_check_bundle_name({'uri': 'https://github.com/prettier/v...r/vim-prettier', 'path': function('1')})

line 1:   if has_key(s:bundle_names, a:bundle.name)
line 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'
line 6:     return 0
line 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'
line 8:     echoerr 'Invalid plugin name: ' . a:bundle.name
line 9:     return 0
line 10:   endif
line 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec
line 12:   return 1
function vundle#config#bundle[2]..<SNR>4_check_bundle_name returning #1

continuing in function vundle#config#bundle

line 3:     return
line 4:   endif
line 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load
line 6:     call add(g:vundle#bundles, bundle)
line 7:   else
line 8:     call s:rtp_rm_a()
line 9:     call add(g:vundle#bundles, bundle)
line 10:     call s:rtp_add_a()
line 11:     call s:rtp_add_defaults()
line 12:   endif
line 13:   return bundle
function vundle#config#bundle returning {'uri': 'https://github.com/prettier/v...r/vim-prettier', 'path': function('1')}

continuing in /Users/marco/repos/vim-prettier-bug/vimrc

line 11: 
line 12: call vundle#end()
calling function vundle#end()

line 1:   unlet g:vundle#lazy_load
line 2:   call vundle#config#activate_bundles()
calling function vundle#end[2]..vundle#config#activate_bundles()

line 1:   call s:rtp_add_a()
calling function vundle#end[2]..vundle#config#activate_bundles[1]..<SNR>4_rtp_add_a()

line 1:   let paths = map(copy(g:vundle#bundles), 'v:val.rtpath')
line 2:   let prepends = join(paths, ',')
line 3:   let appends = join(paths, '/after,').'/after'
line 4:   exec 'set rtp^='.fnameescape(prepends)
line 4: set rtp^=/Users/marco/.vim/bundle/vim-prettier
line 5:   exec 'set rtp+='.fnameescape(appends)
line 5: set rtp+=/Users/marco/.vim/bundle/vim-prettier/after
function vundle#end[2]..vundle#config#activate_bundles[1]..<SNR>4_rtp_add_a returning #0

continuing in function vundle#end[2]..vundle#config#activate_bundles

line 2:   call s:rtp_add_defaults()
calling function vundle#end[2]..vundle#config#activate_bundles[2]..<SNR>4_rtp_add_defaults()

line 1:   let current = &rtp
line 2:   set rtp&vim
line 3:   let default = &rtp
line 4:   let &rtp = current
line 5:   let default_rtp_items = split(default, ',')
line 6:   if !empty(default_rtp_items)
line 7:     let first_item = fnameescape(default_rtp_items[0])
line 8:     exec 'set rtp-=' . first_item
line 8: set rtp-=/Users/marco/.vim
line 9:     exec 'set rtp^=' . first_item
line 9: set rtp^=/Users/marco/.vim
line 10:   endif
function vundle#end[2]..vundle#config#activate_bundles[2]..<SNR>4_rtp_add_defaults returning #0

continuing in function vundle#end[2]..vundle#config#activate_bundles

function vundle#end[2]..vundle#config#activate_bundles returning #0

continuing in function vundle#end

function vundle#end returning #0

continuing in /Users/marco/repos/vim-prettier-bug/vimrc

line 13: " vundle configuration END
line 14: 
line 15: " indent using language-specific scripts
line 16: " in the indent folder of the vim install
line 17: filetype plugin indent on
Searching for "filetype.vim" in "/Users/marco/.vim,/Users/marco/.vim/bundle/vim-prettier,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/marco/.vim/after,/Users/marco/.vim/bundle/Vundle.vim,/Users/marco/.vim/bundle/vim-prettier/after"
Searching for "/Users/marco/.vim/filetype.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/filetype.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/filetype.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/filetype.vim"
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 17: sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/filetype.vim"
line 1: " Vim support file to detect file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2018 Jan 28
line 5: 
line 6: " Listen very carefully, I will say this only once
line 7: if exists("did_load_filetypes")
line 8:   finish
line 9: endif
line 10: let did_load_filetypes = 1
line 11: 
line 12: " Line continuation is used here, remove 'C' from 'cpoptions'
line 13: let s:cpo_save = &cpo
line 14: set cpo&vim
line 15: 
line 16: augroup filetypedetect
line 17: 
line 18: " Ignored extensions
line 19: if exists("*fnameescape")
line 21: au BufNewFile,BufRead ?\+.orig,?\+.bak,?\+.old,?\+.new,?\+.dpkg-dist,?\+.dpkg-old,?\+.dpkg-new,?\+.dpkg-bak,?\+.rpmsave,?\+.rpmnew,?\+.pacsave,?\+.pacnew exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r"))
line 28: au BufNewFile,BufRead *~ let s:name = expand("<afile>") | let s:short = substitute(s:name, '\~$', '', '') | if s:name != s:short && s:short != "" |   exe "doau filetypedetect BufRead " . fnameescape(s:short) | endif | unlet! s:name s:short
line 32: au BufNewFile,BufRead ?\+.in if expand("<afile>:t") != "configure.in" |   exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r")) | endif
line 33: elseif &verbose > 0
line 34:   echomsg "Warning: some filetypes will not be recognized because this version of Vim does not have fnameescape()"
line 35: endif
line 36: 
line 37: " Pattern used to match file names which should not be inspected.
line 38: " Currently finds compressed files.
line 39: if !exists("g:ft_ignore_pat")
line 40:   let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'
line 41: endif
line 42: 
line 43: " Function used for patterns that end in a star: don't set the filetype if the
line 44: " file name matches ft_ignore_pat.
line 45: func! s:StarSetf(ft)
line 50: 
line 51: " Vim help file
line 52: au BufNewFile,BufRead $VIMRUNTIME/doc/*.txt^Isetf help
line 53: 
line 54: " Abaqus or Trasys
line 55: au BufNewFile,BufRead *.inp^I^I^Icall dist#ft#Check_inp()
line 56: 
line 57: " A-A-P recipe
line 58: au BufNewFile,BufRead *.aap^I^I^Isetf aap
line 59: 
line 60: " A2ps printing utility
line 61: au BufNewFile,BufRead */etc/a2ps.cfg,*/etc/a2ps/*.cfg,a2psrc,.a2psrc setf a2ps
line 62: 
line 63: " ABAB/4
line 64: au BufNewFile,BufRead *.abap^I^I^Isetf abap
line 65: 
line 66: " ABC music notation
line 67: au BufNewFile,BufRead *.abc^I^I^Isetf abc
line 68: 
line 69: " ABEL
line 70: au BufNewFile,BufRead *.abl^I^I^Isetf abel
line 71: 
line 72: " AceDB
line 73: au BufNewFile,BufRead *.wrm^I^I^Isetf acedb
line 74: 
line 75: " Ada (83, 9X, 95)
line 76: au BufNewFile,BufRead *.adb,*.ads,*.ada^I^Isetf ada
line 77: if has("vms")
line 78:   au BufNewFile,BufRead *.gpr,*.ada_m,*.adc^Isetf ada
line 79: else
line 80:   au BufNewFile,BufRead *.gpr^I^I^Isetf ada
line 81: endif
line 82: 
line 83: " AHDL
line 84: au BufNewFile,BufRead *.tdf^I^I^Isetf ahdl
line 85: 
line 86: " AMPL
line 87: au BufNewFile,BufRead *.run^I^I^Isetf ampl
line 88: 
line 89: " Ant
line 90: au BufNewFile,BufRead build.xml^I^I^Isetf ant
line 91: 
line 92: " Arduino
line 93: au BufNewFile,BufRead *.ino,*.pde^I^Isetf arduino
line 94: 
line 95: " Apache style config file
line 96: au BufNewFile,BufRead proftpd.conf*^I^Icall s:StarSetf('apachestyle')
line 97: 
line 98: " Apache config file
line 99: au BufNewFile,BufRead .htaccess,*/etc/httpd/*.conf^I^Isetf apache
line 100: 
line 101: " XA65 MOS6510 cross assembler
line 102: au BufNewFile,BufRead *.a65^I^I^Isetf a65
line 103: 
line 104: " Applescript
line 105: au BufNewFile,BufRead *.scpt^I^I^Isetf applescript
line 106: 
line 107: " Applix ELF
line 109: au BufNewFile,BufRead *.am if expand("<afile>") !~? 'Makefile.am\>' | setf elf | endif
line 110: 
line 111: " ALSA configuration
line 112: au BufNewFile,BufRead .asoundrc,*/usr/share/alsa/alsa.conf,*/etc/asound.conf setf alsaconf
line 113: 
line 114: " Arc Macro Language
line 115: au BufNewFile,BufRead *.aml^I^I^Isetf aml
line 116: 
line 117: " APT config file
line 118: au BufNewFile,BufRead apt.conf^I^I       setf aptconf
line 119: au BufNewFile,BufRead */.aptitude/config       setf aptconf
line 120: au BufNewFile,BufRead */etc/apt/apt.conf.d/{[-_[:alnum:]]\+,[-_.[:alnum:]]\+.conf} setf aptconf
line 121: 
line 122: " Arch Inventory file
line 123: au BufNewFile,BufRead .arch-inventory,=tagging-method^Isetf arch
line 124: 
line 125: " ART*Enterprise (formerly ART-IM)
line 126: au BufNewFile,BufRead *.art^I^I^Isetf art
line 127: 
line 128: " AsciiDoc
line 129: au BufNewFile,BufRead *.asciidoc,*.adoc^I^Isetf asciidoc
line 130: 
line 131: " ASN.1
line 132: au BufNewFile,BufRead *.asn,*.asn1^I^Isetf asn
line 133: 
line 134: " Active Server Pages (with Visual Basic Script)
line 140: au BufNewFile,BufRead *.asa if exists("g:filetype_asa") |   exe "setf " . g:filetype_asa | else |   setf aspvbs | endif
line 141: 
line 142: " Active Server Pages (with Perl or Visual Basic Script)
line 150: au BufNewFile,BufRead *.asp if exists("g:filetype_asp") |   exe "setf " . g:filetype_asp | elseif getline(1) . getline(2) . getline(3) =~? "perlscript" |   setf aspperl | else |   setf aspvbs | endif
line 151: 
line 152: " Grub (must be before catch *.lst)
line 153: au BufNewFile,BufRead */boot/grub/menu.lst,*/boot/grub/grub.conf,*/etc/grub.conf setf grub
line 154: 
line 155: " Assembly (all kinds)
line 156: " *.lst is not pure assembly, it has two extra columns (address, byte codes)
line 157: au BufNewFile,BufRead *.asm,*.[sS],*.[aA],*.mac,*.lst^Icall dist#ft#FTasm()
line 158: 
line 159: " Macro (VAX)
line 160: au BufNewFile,BufRead *.mar^I^I^Isetf vmasm
line 161: 
line 162: " Atlas
line 163: au BufNewFile,BufRead *.atl,*.as^I^Isetf atlas
line 164: 
line 165: " Autoit v3
line 166: au BufNewFile,BufRead *.au3^I^I^Isetf autoit
line 167: 
line 168: " Autohotkey
line 169: au BufNewFile,BufRead *.ahk^I^I^Isetf autohotkey
line 170: 
line 171: " Automake
line 172: au BufNewFile,BufRead [mM]akefile.am,GNUmakefile.am^Isetf automake
line 173: 
line 174: " Autotest .at files are actually m4
line 175: au BufNewFile,BufRead *.at^I^I^Isetf m4
line 176: 
line 177: " Avenue
line 178: au BufNewFile,BufRead *.ave^I^I^Isetf ave
line 179: 
line 180: " Awk
line 181: au BufNewFile,BufRead *.awk^I^I^Isetf awk
line 182: 
line 183: " B
line 184: au BufNewFile,BufRead *.mch,*.ref,*.imp^I^Isetf b
line 185: 
line 186: " BASIC or Visual Basic
line 187: au BufNewFile,BufRead *.bas^I^I^Icall dist#ft#FTVB("basic")
line 188: 
line 189: " Visual Basic Script (close to Visual Basic) or Visual Basic .NET
line 190: au BufNewFile,BufRead *.vb,*.vbs,*.dsm,*.ctl^Isetf vb
line 191: 
line 192: " IBasic file (similar to QBasic)
line 193: au BufNewFile,BufRead *.iba,*.ibi^I^Isetf ibasic
line 194: 
line 195: " FreeBasic file (similar to QBasic)
line 196: au BufNewFile,BufRead *.fb,*.bi^I^I^Isetf freebasic
line 197: 
line 198: " Batch file for MSDOS.
line 199: au BufNewFile,BufRead *.bat,*.sys^I^Isetf dosbatch
line 200: " *.cmd is close to a Batch file, but on OS/2 Rexx files also use *.cmd.
line 202: au BufNewFile,BufRead *.cmd if getline(1) =~ '^/\*' | setf rexx | else | setf dosbatch | endif
line 203: 
line 204: " Batch file for 4DOS
line 205: au BufNewFile,BufRead *.btm^I^I^Icall dist#ft#FTbtm()
line 206: 
line 207: " BC calculator
line 208: au BufNewFile,BufRead *.bc^I^I^Isetf bc
line 209: 
line 210: " BDF font
line 211: au BufNewFile,BufRead *.bdf^I^I^Isetf bdf
line 212: 
line 213: " BibTeX bibliography database file
line 214: au BufNewFile,BufRead *.bib^I^I^Isetf bib
line 215: 
line 216: " BibTeX Bibliography Style
line 217: au BufNewFile,BufRead *.bst^I^I^Isetf bst
line 218: 
line 219: " BIND configuration
line 220: " sudoedit uses namedXXXX.conf
line 221: au BufNewFile,BufRead named*.conf,rndc*.conf,rndc*.key^Isetf named
line 222: 
line 223: " BIND zone
line 224: au BufNewFile,BufRead named.root^I^Isetf bindzone
line 225: au BufNewFile,BufRead *.db^I^I^Icall dist#ft#BindzoneCheck('')
line 226: 
line 227: " Blank
line 228: au BufNewFile,BufRead *.bl^I^I^Isetf blank
line 229: 
line 230: " Blkid cache file
line 231: au BufNewFile,BufRead */etc/blkid.tab,*/etc/blkid.tab.old   setf xml
line 232: 
line 233: " Bazel (http://bazel.io)
line 234: autocmd BufRead,BufNewFile *.bzl,WORKSPACE,BUILD.bazel ^Isetf bzl
line 235: if has("fname_case")
line 236:   " There is another check for BUILD further below.
line 237:   autocmd BufRead,BufNewFile BUILD^I^I^Isetf bzl
line 238: endif
line 239: 
line 240: " C or lpc
line 241: au BufNewFile,BufRead *.c^I^I^Icall dist#ft#FTlpc()
line 242: au BufNewFile,BufRead *.lpc,*.ulpc^I^Isetf lpc
line 243: 
line 244: " Calendar
line 245: au BufNewFile,BufRead calendar^I^I^Isetf calendar
line 246: 
line 247: " C#
line 248: au BufNewFile,BufRead *.cs^I^I^Isetf cs
line 249: 
line 250: " CSDL
line 251: au BufNewFile,BufRead *.csdl^I^I^Isetf csdl
line 252: 
line 253: " Cabal
line 254: au BufNewFile,BufRead *.cabal^I^I^Isetf cabal
line 255: 
line 256: " Cdrdao TOC
line 257: au BufNewFile,BufRead *.toc^I^I^Isetf cdrtoc
line 258: 
line 259: " Cdrdao config
line 260: au BufNewFile,BufRead */etc/cdrdao.conf,*/etc/defaults/cdrdao,*/etc/default/cdrdao,.cdrdao^Isetf cdrdaoconf
line 261: 
line 262: " Cfengine
line 263: au BufNewFile,BufRead cfengine.conf^I^Isetf cfengine
line 264: 
line 265: " ChaiScript
line 266: au BufRead,BufNewFile *.chai^I^I^Isetf chaiscript
line 267: 
line 268: " Comshare Dimension Definition Language
line 269: au BufNewFile,BufRead *.cdl^I^I^Isetf cdl
line 270: 
line 271: " Conary Recipe
line 272: au BufNewFile,BufRead *.recipe^I^I^Isetf conaryrecipe
line 273: 
line 274: " Controllable Regex Mutilator
line 275: au BufNewFile,BufRead *.crm^I^I^Isetf crm
line 276: 
line 277: " Cyn++
line 278: au BufNewFile,BufRead *.cyn^I^I^Isetf cynpp
line 279: 
line 280: " Cynlib
line 281: " .cc and .cpp files can be C++ or Cynlib.
line 283: au BufNewFile,BufRead *.cc if exists("cynlib_syntax_for_cc")|setf cynlib|else|setf cpp|endif
line 285: au BufNewFile,BufRead *.cpp if exists("cynlib_syntax_for_cpp")|setf cynlib|else|setf cpp|endif
line 286: 
line 287: " C++
line 288: au BufNewFile,BufRead *.cxx,*.c++,*.hh,*.hxx,*.hpp,*.ipp,*.moc,*.tcc,*.inl setf cpp
line 289: if has("fname_case")
line 290:   au BufNewFile,BufRead *.C,*.H setf cpp
line 291: endif
line 292: 
line 293: " .h files can be C, Ch C++, ObjC or ObjC++.
line 294: " Set c_syntax_for_h if you want C, ch_syntax_for_h if you want Ch. ObjC is
line 295: " detected automatically.
line 296: au BufNewFile,BufRead *.h^I^I^Icall dist#ft#FTheader()
line 297: 
line 298: " Ch (CHscript)
line 299: au BufNewFile,BufRead *.chf^I^I^Isetf ch
line 300: 
line 301: " TLH files are C++ headers generated by Visual C++'s #import from typelibs
line 302: au BufNewFile,BufRead *.tlh^I^I^Isetf cpp
line 303: 
line 304: " Cascading Style Sheets
line 305: au BufNewFile,BufRead *.css^I^I^Isetf css
line 306: 
line 307: " Century Term Command Scripts (*.cmd too)
line 308: au BufNewFile,BufRead *.con^I^I^Isetf cterm
line 309: 
line 310: " Changelog
line 312: au BufNewFile,BufRead changelog.Debian,changelog.dch,NEWS.Debian,NEWS.dch^Isetf debchangelog
line 313: 
line 319: au BufNewFile,BufRead [cC]hange[lL]og  if getline(1) =~ '; urgency='|   setf debchangelog| else|   setf changelog| endif
line 320: 
line 324: au BufNewFile,BufRead NEWS  if getline(1) =~ '; urgency='|   setf debchangelog| endif
line 325: 
line 326: " CHILL
line 327: au BufNewFile,BufRead *..ch^I^I^Isetf chill
line 328: 
line 329: " Changes for WEB and CWEB or CHILL
line 330: au BufNewFile,BufRead *.ch^I^I^Icall dist#ft#FTchange()
line 331: 
line 332: " ChordPro
line 333: au BufNewFile,BufRead *.chopro,*.crd,*.cho,*.crdpro,*.chordpro^Isetf chordpro
line 334: 
line 335: " Clean
line 336: au BufNewFile,BufRead *.dcl,*.icl^I^Isetf clean
line 337: 
line 338: " Clever
line 339: au BufNewFile,BufRead *.eni^I^I^Isetf cl
line 340: 
line 341: " Clever or dtd
line 342: au BufNewFile,BufRead *.ent^I^I^Icall dist#ft#FTent()
line 343: 
line 344: " Clipper (or FoxPro; could also be eviews)
line 350: au BufNewFile,BufRead *.prg if exists("g:filetype_prg") |   exe "setf " . g:filetype_prg | else |   setf clipper | endif
line 351: 
line 352: " Clojure
line 353: au BufNewFile,BufRead *.clj,*.cljs,*.cljx,*.cljc^I^Isetf clojure
line 354: 
line 355: " Cmake
line 356: au BufNewFile,BufRead CMakeLists.txt,*.cmake,*.cmake.in^I^Isetf cmake
line 357: 
line 358: " Cmusrc
line 359: au BufNewFile,BufRead */.cmus/{autosave,rc,command-history,*.theme} setf cmusrc
line 360: au BufNewFile,BufRead */cmus/{rc,*.theme}^I^I^Isetf cmusrc
line 361: 
line 362: " Cobol
line 363: au BufNewFile,BufRead *.cbl,*.cob,*.lib^Isetf cobol
line 364: "   cobol or zope form controller python script? (heuristic)
line 370: au BufNewFile,BufRead *.cpy if getline(1) =~ '^##' |   setf python | else |   setf cobol | endif
line 371: 
line 372: " Coco/R
line 373: au BufNewFile,BufRead *.atg^I^I^Isetf coco
line 374: 
line 375: " Cold Fusion
line 376: au BufNewFile,BufRead *.cfm,*.cfi,*.cfc^I^Isetf cf
line 377: 
line 378: " Configure scripts
line 379: au BufNewFile,BufRead configure.in,configure.ac setf config
line 380: 
line 381: " CUDA  Cumpute Unified Device Architecture
line 382: au BufNewFile,BufRead *.cu,*.cuh^I^Isetf cuda
line 383: 
line 384: " Dockerfile
line 385: au BufNewFile,BufRead Dockerfile,*.Dockerfile^Isetf dockerfile
line 386: 
line 387: " WildPackets EtherPeek Decoder
line 388: au BufNewFile,BufRead *.dcd^I^I^Isetf dcd
line 389: 
line 390: " Enlightenment configuration files
line 391: au BufNewFile,BufRead *enlightenment/*.cfg^Isetf c
line 392: 
line 393: " Eterm
line 394: au BufNewFile,BufRead *Eterm/*.cfg^I^Isetf eterm
line 395: 
line 396: " Euphoria 3 or 4
line 397: au BufNewFile,BufRead *.eu,*.ew,*.ex,*.exu,*.exw  call dist#ft#EuphoriaCheck()
line 398: if has("fname_case")
line 399:    au BufNewFile,BufRead *.EU,*.EW,*.EX,*.EXU,*.EXW  call dist#ft#EuphoriaCheck()
line 400: endif
line 401: 
line 402: " Lynx config files
line 403: au BufNewFile,BufRead lynx.cfg^I^I^Isetf lynx
line 404: 
line 405: " Quake
line 406: au BufNewFile,BufRead *baseq[2-3]/*.cfg,*id1/*.cfg^Isetf quake
line 407: au BufNewFile,BufRead *quake[1-3]/*.cfg^I^I^Isetf quake
line 408: 
line 409: " Quake C
line 410: au BufNewFile,BufRead *.qc^I^I^Isetf c
line 411: 
line 412: " Configure files
line 413: au BufNewFile,BufRead *.cfg^I^I^Isetf cfg
line 414: 
line 415: " Cucumber
line 416: au BufNewFile,BufRead *.feature^I^I^Isetf cucumber
line 417: 
line 418: " Communicating Sequential Processes
line 419: au BufNewFile,BufRead *.csp,*.fdr^I^Isetf csp
line 420: 
line 421: " CUPL logic description and simulation
line 422: au BufNewFile,BufRead *.pld^I^I^Isetf cupl
line 423: au BufNewFile,BufRead *.si^I^I^Isetf cuplsim
line 424: 
line 425: " Debian Control
line 426: au BufNewFile,BufRead */debian/control^I^Isetf debcontrol
line 430: au BufNewFile,BufRead control  if getline(1) =~ '^Source:'|   setf debcontrol| endif
line 431: 
line 432: " Debian Sources.list
line 433: au BufNewFile,BufRead */etc/apt/sources.list^I^Isetf debsources
line 434: au BufNewFile,BufRead */etc/apt/sources.list.d/*.list^Isetf debsources
line 435: 
line 436: " Deny hosts
line 437: au BufNewFile,BufRead denyhosts.conf^I^Isetf denyhosts
line 438: 
line 439: " dnsmasq(8) configuration files
line 440: au BufNewFile,BufRead */etc/dnsmasq.conf^Isetf dnsmasq
line 441: 
line 442: " ROCKLinux package description
line 443: au BufNewFile,BufRead *.desc^I^I^Isetf desc
line 444: 
line 445: " the D language or dtrace
line 446: au BufNewFile,BufRead *.d^I^I^Icall dist#ft#DtraceCheck()
line 447: 
line 448: " Desktop files
line 449: au BufNewFile,BufRead *.desktop,.directory^Isetf desktop
line 450: 
line 451: " Dict config
line 452: au BufNewFile,BufRead dict.conf,.dictrc^I^Isetf dictconf
line 453: 
line 454: " Dictd config
line 455: au BufNewFile,BufRead dictd.conf^I^Isetf dictdconf
line 456: 
line 457: " Diff files
line 458: au BufNewFile,BufRead *.diff,*.rej^I^Isetf diff
line 464: au BufNewFile,BufRead *.patch if getline(1) =~ '^From [0-9a-f]\{40\} Mon Sep 17 00:00:00 2001$' |   setf gitsendemail | else |   setf diff | endif
line 465: 
line 466: " Dircolors
line 467: au BufNewFile,BufRead .dir_colors,.dircolors,*/etc/DIR_COLORS^Isetf dircolors
line 468: 
line 469: " Diva (with Skill) or InstallShield
line 475: au BufNewFile,BufRead *.rul if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6) =~? 'InstallShield' |   setf ishd | else |   setf diva | endif
line 476: 
line 477: " DCL (Digital Command Language - vms) or DNS zone file
line 478: au BufNewFile,BufRead *.com^I^I^Icall dist#ft#BindzoneCheck('dcl')
line 479: 
line 480: " DOT
line 481: au BufNewFile,BufRead *.dot^I^I^Isetf dot
line 482: 
line 483: " Dylan - lid files
line 484: au BufNewFile,BufRead *.lid^I^I^Isetf dylanlid
line 485: 
line 486: " Dylan - intr files (melange)
line 487: au BufNewFile,BufRead *.intr^I^I^Isetf dylanintr
line 488: 
line 489: " Dylan
line 490: au BufNewFile,BufRead *.dylan^I^I^Isetf dylan
line 491: 
line 492: " Microsoft Module Definition
line 493: au BufNewFile,BufRead *.def^I^I^Isetf def
line 494: 
line 495: " Dracula
line 496: au BufNewFile,BufRead *.drac,*.drc,*lvs,*lpe^Isetf dracula
line 497: 
line 498: " Datascript
line 499: au BufNewFile,BufRead *.ds^I^I^Isetf datascript
line 500: 
line 501: " dsl
line 502: au BufNewFile,BufRead *.dsl^I^I^Isetf dsl
line 503: 
line 504: " DTD (Document Type Definition for XML)
line 505: au BufNewFile,BufRead *.dtd^I^I^Isetf dtd
line 506: 
line 507: " DTS/DSTI (device tree files)
line 508: au BufNewFile,BufRead *.dts,*.dtsi^I^Isetf dts
line 509: 
line 510: " EDIF (*.edf,*.edif,*.edn,*.edo) or edn
line 511: au BufNewFile,BufRead *.ed\(f\|if\|o\)^I^Isetf edif
line 517: au BufNewFile,BufRead *.edn if getline(1) =~ '^\s*(\s*edif\>' |   setf edif | else |   setf clojure | endif
line 518: 
line 519: " EditorConfig (close enough to dosini)
line 520: au BufNewFile,BufRead .editorconfig^I^Isetf dosini
line 521: 
line 522: " Embedix Component Description
line 523: au BufNewFile,BufRead *.ecd^I^I^Isetf ecd
line 524: 
line 525: " Eiffel or Specman or Euphoria
line 526: au BufNewFile,BufRead *.e,*.E^I^I^Icall dist#ft#FTe()
line 527: 
line 528: " Elinks configuration
line 529: au BufNewFile,BufRead */etc/elinks.conf,*/.elinks/elinks.conf^Isetf elinks
line 530: 
line 531: " ERicsson LANGuage; Yaws is erlang too
line 532: au BufNewFile,BufRead *.erl,*.hrl,*.yaws^Isetf erlang
line 533: 
line 534: " Elm Filter Rules file
line 535: au BufNewFile,BufRead filter-rules^I^Isetf elmfilt
line 536: 
line 537: " ESMTP rc file
line 538: au BufNewFile,BufRead *esmtprc^I^I^Isetf esmtprc
line 539: 
line 540: " ESQL-C
line 541: au BufNewFile,BufRead *.ec,*.EC^I^I^Isetf esqlc
line 542: 
line 543: " Esterel
line 544: au BufNewFile,BufRead *.strl^I^I^Isetf esterel
line 545: 
line 546: " Essbase script
line 547: au BufNewFile,BufRead *.csc^I^I^Isetf csc
line 548: 
line 549: " Exim
line 550: au BufNewFile,BufRead exim.conf^I^I^Isetf exim
line 551: 
line 552: " Expect
line 553: au BufNewFile,BufRead *.exp^I^I^Isetf expect
line 554: 
line 555: " Exports
line 556: au BufNewFile,BufRead exports^I^I^Isetf exports
line 557: 
line 558: " Falcon
line 559: au BufNewFile,BufRead *.fal^I^I^Isetf falcon
line 560: 
line 561: " Fantom
line 562: au BufNewFile,BufRead *.fan,*.fwt^I^Isetf fan
line 563: 
line 564: " Factor
line 565: au BufNewFile,BufRead *.factor^I^I^Isetf factor
line 566: 
line 567: " Fetchmail RC file
line 568: au BufNewFile,BufRead .fetchmailrc^I^Isetf fetchmail
line 569: 
line 570: " FlexWiki - disabled, because it has side effects when a .wiki file
line 571: " is not actually FlexWiki
line 572: "au BufNewFile,BufRead *.wiki^I^I^Isetf flexwiki
line 573: 
line 574: " Focus Executable
line 575: au BufNewFile,BufRead *.fex,*.focexec^I^Isetf focexec
line 576: 
line 577: " Focus Master file (but not for auto.master)
line 578: au BufNewFile,BufRead auto.master^I^Isetf conf
line 579: au BufNewFile,BufRead *.mas,*.master^I^Isetf master
line 580: 
line 581: " Forth
line 582: au BufNewFile,BufRead *.fs,*.ft^I^I^Isetf forth
line 583: 
line 584: " Reva Forth
line 585: au BufNewFile,BufRead *.frt^I^I^Isetf reva
line 586: 
line 587: " Fortran
line 588: if has("fname_case")
line 589:   au BufNewFile,BufRead *.F,*.FOR,*.FPP,*.FTN,*.F77,*.F90,*.F95,*.F03,*.F08^I setf fortran
line 590: endif
line 591: au BufNewFile,BufRead   *.f,*.for,*.fortran,*.fpp,*.ftn,*.f77,*.f90,*.f95,*.f03,*.f08  setf fortran
line 592: 
line 593: " Framescript
line 594: au BufNewFile,BufRead *.fsl^I^I^Isetf framescript
line 595: 
line 596: " FStab
line 597: au BufNewFile,BufRead fstab,mtab^I^Isetf fstab
line 598: 
line 599: " GDB command files
line 600: au BufNewFile,BufRead .gdbinit^I^I^Isetf gdb
line 601: 
line 602: " GDMO
line 603: au BufNewFile,BufRead *.mo,*.gdmo^I^Isetf gdmo
line 604: 
line 605: " Gedcom
line 606: au BufNewFile,BufRead *.ged,lltxxxxx.txt^Isetf gedcom
line 607: 
line 608: " Git
line 609: au BufNewFile,BufRead COMMIT_EDITMSG,MERGE_MSG,TAG_EDITMSG setf gitcommit
line 610: au BufNewFile,BufRead *.git/config,.gitconfig,.gitmodules setf gitconfig
line 611: au BufNewFile,BufRead *.git/modules/*/config^Isetf gitconfig
line 612: au BufNewFile,BufRead */.config/git/config^Isetf gitconfig
line 613: if !empty($XDG_CONFIG_HOME)
line 614:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/config^Isetf gitconfig
line 615: endif
line 616: au BufNewFile,BufRead git-rebase-todo^I^Isetf gitrebase
line 617: au BufRead,BufNewFile .gitsendemail.msg.??????^Isetf gitsendemail
line 621: au BufNewFile,BufRead .msg.[0-9]* if getline(1) =~ '^From.*# This line is ignored.$' |   setf gitsendemail | endif
line 625: au BufNewFile,BufRead *.git/* if getline(1) =~ '^\x\{40\}\>\|^ref: ' |   setf git | endif
line 626: 
line 627: " Gkrellmrc
line 628: au BufNewFile,BufRead gkrellmrc,gkrellmrc_?^Isetf gkrellmrc
line 629: 
line 630: " GP scripts (2.0 and onward)
line 631: au BufNewFile,BufRead *.gp,.gprc^I^Isetf gp
line 632: 
line 633: " GPG
line 634: au BufNewFile,BufRead */.gnupg/options^I^Isetf gpg
line 635: au BufNewFile,BufRead */.gnupg/gpg.conf^I^Isetf gpg
line 636: au BufNewFile,BufRead */usr/*/gnupg/options.skel setf gpg
line 637: if !empty($GNUPGHOME)
line 638:   au BufNewFile,BufRead $GNUPGHOME/options^Isetf gpg
line 639:   au BufNewFile,BufRead $GNUPGHOME/gpg.conf^Isetf gpg
line 640: endif
line 641: 
line 642: " gnash(1) configuration files
line 643: au BufNewFile,BufRead gnashrc,.gnashrc,gnashpluginrc,.gnashpluginrc setf gnash
line 644: 
line 645: " Gitolite
line 646: au BufNewFile,BufRead gitolite.conf^I^Isetf gitolite
line 647: au BufNewFile,BufRead */gitolite-admin/conf/*^Icall s:StarSetf('gitolite')
line 648: au BufNewFile,BufRead {,.}gitolite.rc,example.gitolite.rc^Isetf perl
line 649: 
line 650: " Gnuplot scripts
line 651: au BufNewFile,BufRead *.gpi^I^I^Isetf gnuplot
line 652: 
line 653: " Go (Google)
line 654: au BufNewFile,BufRead *.go^I^I^Isetf go
line 655: 
line 656: " GrADS scripts
line 657: au BufNewFile,BufRead *.gs^I^I^Isetf grads
line 658: 
line 659: " Gretl
line 660: au BufNewFile,BufRead *.gretl^I^I^Isetf gretl
line 661: 
line 662: " Groovy
line 663: au BufNewFile,BufRead *.gradle,*.groovy^I^Isetf groovy
line 664: 
line 665: " GNU Server Pages
line 666: au BufNewFile,BufRead *.gsp^I^I^Isetf gsp
line 667: 
line 668: " Group file
line 669: au BufNewFile,BufRead */etc/group,*/etc/group-,*/etc/group.edit,*/etc/gshadow,*/etc/gshadow-,*/etc/gshadow.edit,*/var/backups/group.bak,*/var/backups/gshadow.bak  setf group
line 670: 
line 671: " GTK RC
line 672: au BufNewFile,BufRead .gtkrc,gtkrc^I^Isetf gtkrc
line 673: 
line 674: " Haml
line 675: au BufNewFile,BufRead *.haml^I^I^Isetf haml
line 676: 
line 677: " Hamster Classic | Playground files
line 678: au BufNewFile,BufRead *.hsc,*.hsm^I^Isetf hamster
line 679: 
line 680: " Haskell
line 681: au BufNewFile,BufRead *.hs,*.hs-boot^I^Isetf haskell
line 682: au BufNewFile,BufRead *.lhs^I^I^Isetf lhaskell
line 683: au BufNewFile,BufRead *.chs^I^I^Isetf chaskell
line 684: 
line 685: " Haste
line 686: au BufNewFile,BufRead *.ht^I^I^Isetf haste
line 687: au BufNewFile,BufRead *.htpp^I^I^Isetf hastepreproc
line 688: 
line 689: " Hercules
line 690: au BufNewFile,BufRead *.vc,*.ev,*.sum,*.errsum^Isetf hercules
line 691: 
line 692: " HEX (Intel)
line 693: au BufNewFile,BufRead *.hex,*.h32^I^Isetf hex
line 694: 
line 695: " Tilde (must be before HTML)
line 696: au BufNewFile,BufRead *.t.html^I^I^Isetf tilde
line 697: 
line 698: " HTML (.shtml and .stm for server side)
line 699: au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm  call dist#ft#FThtml()
line 700: 
line 701: " HTML with Ruby - eRuby
line 702: au BufNewFile,BufRead *.erb,*.rhtml^I^Isetf eruby
line 703: 
line 704: " HTML with M4
line 705: au BufNewFile,BufRead *.html.m4^I^I^Isetf htmlm4
line 706: 
line 707: " HTML Cheetah template
line 708: au BufNewFile,BufRead *.tmpl^I^I^Isetf htmlcheetah
line 709: 
line 710: " Host config
line 711: au BufNewFile,BufRead */etc/host.conf^I^Isetf hostconf
line 712: 
line 713: " Hosts access
line 714: au BufNewFile,BufRead */etc/hosts.allow,*/etc/hosts.deny  setf hostsaccess
line 715: 
line 716: " Hyper Builder
line 717: au BufNewFile,BufRead *.hb^I^I^Isetf hb
line 718: 
line 719: " Httest
line 720: au BufNewFile,BufRead *.htt,*.htb^I^Isetf httest
line 721: 
line 722: " Icon
line 723: au BufNewFile,BufRead *.icn^I^I^Isetf icon
line 724: 
line 725: " IDL (Interface Description Language)
line 726: au BufNewFile,BufRead *.idl^I^I^Icall dist#ft#FTidl()
line 727: 
line 728: " Microsoft IDL (Interface Description Language)  Also *.idl
line 729: " MOF = WMI (Windows Management Instrumentation) Managed Object Format
line 730: au BufNewFile,BufRead *.odl,*.mof^I^Isetf msidl
line 731: 
line 732: " Icewm menu
line 733: au BufNewFile,BufRead */.icewm/menu^I^Isetf icemenu
line 734: 
line 735: " Indent profile (must come before IDL *.pro!)
line 736: au BufNewFile,BufRead .indent.pro^I^Isetf indent
line 737: au BufNewFile,BufRead indent.pro^I^Icall dist#ft#ProtoCheck('indent')
line 738: 
line 739: " IDL (Interactive Data Language)
line 740: au BufNewFile,BufRead *.pro^I^I^Icall dist#ft#ProtoCheck('idlang')
line 741: 
line 742: " Indent RC
line 743: au BufNewFile,BufRead indentrc^I^I^Isetf indent
line 744: 
line 745: " Inform
line 746: au BufNewFile,BufRead *.inf,*.INF^I^Isetf inform
line 747: 
line 748: " Initng
line 749: au BufNewFile,BufRead */etc/initng/*/*.i,*.ii^Isetf initng
line 750: 
line 751: " Innovation Data Processing
line 752: au BufRead,BufNewFile upstream.dat\c,upstream.*.dat\c,*.upstream.dat\c ^Isetf upstreamdat
line 753: au BufRead,BufNewFile fdrupstream.log,upstream.log\c,upstream.*.log\c,*.upstream.log\c,UPSTREAM-*.log\c ^Isetf upstreamlog
line 754: au BufRead,BufNewFile upstreaminstall.log\c,upstreaminstall.*.log\c,*.upstreaminstall.log\c setf upstreaminstalllog
line 755: au BufRead,BufNewFile usserver.log\c,usserver.*.log\c,*.usserver.log\c ^Isetf usserverlog
line 756: au BufRead,BufNewFile usw2kagt.log\c,usw2kagt.*.log\c,*.usw2kagt.log\c ^Isetf usw2kagtlog
line 757: 
line 758: " Ipfilter
line 759: au BufNewFile,BufRead ipf.conf,ipf6.conf,ipf.rules^Isetf ipfilter
line 760: 
line 761: " Informix 4GL (source - canonical, include file, I4GL+M4 preproc.)
line 762: au BufNewFile,BufRead *.4gl,*.4gh,*.m4gl^Isetf fgl
line 763: 
line 764: " .INI file for MSDOS
line 765: au BufNewFile,BufRead *.ini^I^I^Isetf dosini
line 766: 
line 767: " SysV Inittab
line 768: au BufNewFile,BufRead inittab^I^I^Isetf inittab
line 769: 
line 770: " Inno Setup
line 771: au BufNewFile,BufRead *.iss^I^I^Isetf iss
line 772: 
line 773: " J
line 774: au BufNewFile,BufRead *.ijs^I^I^Isetf j
line 775: 
line 776: " JAL
line 777: au BufNewFile,BufRead *.jal,*.JAL^I^Isetf jal
line 778: 
line 779: " Jam
line 780: au BufNewFile,BufRead *.jpl,*.jpr^I^Isetf jam
line 781: 
line 782: " Java
line 783: au BufNewFile,BufRead *.java,*.jav^I^Isetf java
line 784: 
line 785: " JavaCC
line 786: au BufNewFile,BufRead *.jj,*.jjt^I^Isetf javacc
line 787: 
line 788: " JavaScript, ECMAScript
line 789: au BufNewFile,BufRead *.js,*.javascript,*.es,*.jsx,*.mjs   setf javascript
line 790: 
line 791: " Java Server Pages
line 792: au BufNewFile,BufRead *.jsp^I^I^Isetf jsp
line 793: 
line 794: " Java Properties resource file (note: doesn't catch font.properties.pl)
line 795: au BufNewFile,BufRead *.properties,*.properties_??,*.properties_??_??^Isetf jproperties
line 796: au BufNewFile,BufRead *.properties_??_??_*^Icall s:StarSetf('jproperties')
line 797: 
line 798: " Jess
line 799: au BufNewFile,BufRead *.clp^I^I^Isetf jess
line 800: 
line 801: " Jgraph
line 802: au BufNewFile,BufRead *.jgr^I^I^Isetf jgraph
line 803: 
line 804: " Jovial
line 805: au BufNewFile,BufRead *.jov,*.j73,*.jovial^Isetf jovial
line 806: 
line 807: " JSON
line 808: au BufNewFile,BufRead *.json,*.jsonp,*.webmanifest^Isetf json
line 809: 
line 810: " Kixtart
line 811: au BufNewFile,BufRead *.kix^I^I^Isetf kix
line 812: 
line 813: " Kimwitu[++]
line 814: au BufNewFile,BufRead *.k^I^I^Isetf kwt
line 815: 
line 816: " Kivy
line 817: au BufNewFile,BufRead *.kv^I^I^Isetf kivy
line 818: 
line 819: " KDE script
line 820: au BufNewFile,BufRead *.ks^I^I^Isetf kscript
line 821: 
line 822: " Kconfig
line 823: au BufNewFile,BufRead Kconfig,Kconfig.debug^Isetf kconfig
line 824: 
line 825: " Lace (ISE)
line 826: au BufNewFile,BufRead *.ace,*.ACE^I^Isetf lace
line 827: 
line 828: " Latte
line 829: au BufNewFile,BufRead *.latte,*.lte^I^Isetf latte
line 830: 
line 831: " Limits
line 832: au BufNewFile,BufRead */etc/limits,*/etc/*limits.conf,*/etc/*limits.d/*.conf^Isetf limits
line 833: 
line 834: " LambdaProlog (*.mod too, see Modsim)
line 835: au BufNewFile,BufRead *.sig^I^I^Isetf lprolog
line 836: 
line 837: " LDAP LDIF
line 838: au BufNewFile,BufRead *.ldif^I^I^Isetf ldif
line 839: 
line 840: " Ld loader
line 841: au BufNewFile,BufRead *.ld^I^I^Isetf ld
line 842: 
line 843: " Less
line 844: au BufNewFile,BufRead *.less^I^I^Isetf less
line 845: 
line 846: " Lex
line 847: au BufNewFile,BufRead *.lex,*.l,*.lxx,*.l++^Isetf lex
line 848: 
line 849: " Libao
line 850: au BufNewFile,BufRead */etc/libao.conf,*/.libao^Isetf libao
line 851: 
line 852: " Libsensors
line 853: au BufNewFile,BufRead */etc/sensors.conf,*/etc/sensors3.conf^Isetf sensors
line 854: 
line 855: " LFTP
line 856: au BufNewFile,BufRead lftp.conf,.lftprc,*lftp/rc^Isetf lftp
line 857: 
line 858: " Lifelines (or Lex for C++!)
line 859: au BufNewFile,BufRead *.ll^I^I^Isetf lifelines
line 860: 
line 861: " Lilo: Linux loader
line 862: au BufNewFile,BufRead lilo.conf^I^I^Isetf lilo
line 863: 
line 864: " Lisp (*.el = ELisp, *.cl = Common Lisp, *.jl = librep Lisp)
line 865: if has("fname_case")
line 866:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,*.L,.emacs,.sawfishrc setf lisp
line 867: else
line 868:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.jl,.emacs,.sawfishrc setf lisp
line 869: endif
line 870: 
line 871: " SBCL implementation of Common Lisp
line 872: au BufNewFile,BufRead sbclrc,.sbclrc^I^Isetf lisp
line 873: 
line 874: " Liquid
line 875: au BufNewFile,BufRead *.liquid^I^I^Isetf liquid
line 876: 
line 877: " Lite
line 878: au BufNewFile,BufRead *.lite,*.lt^I^Isetf lite
line 879: 
line 880: " LiteStep RC files
line 881: au BufNewFile,BufRead */LiteStep/*/*.rc^I^Isetf litestep
line 882: 
line 883: " Login access
line 884: au BufNewFile,BufRead */etc/login.access^Isetf loginaccess
line 885: 
line 886: " Login defs
line 887: au BufNewFile,BufRead */etc/login.defs^I^Isetf logindefs
line 888: 
line 889: " Logtalk
line 890: au BufNewFile,BufRead *.lgt^I^I^Isetf logtalk
line 891: 
line 892: " LOTOS
line 893: au BufNewFile,BufRead *.lot,*.lotos^I^Isetf lotos
line 894: 
line 895: " Lout (also: *.lt)
line 896: au BufNewFile,BufRead *.lou,*.lout^I^Isetf lout
line 897: 
line 898: " Lua
line 899: au BufNewFile,BufRead *.lua^I^I^Isetf lua
line 900: 
line 901: " Luarocks
line 902: au BufNewFile,BufRead *.rockspec^I^Isetf lua
line 903: 
line 904: " Linden Scripting Language (Second Life)
line 905: au BufNewFile,BufRead *.lsl^I^I^Isetf lsl
line 906: 
line 907: " Lynx style file (or LotusScript!)
line 908: au BufNewFile,BufRead *.lss^I^I^Isetf lss
line 909: 
line 910: " M4
line 912: au BufNewFile,BufRead *.m4 if expand("<afile>") !~? 'html.m4$\|fvwm2rc' | setf m4 | endif
line 913: 
line 914: " MaGic Point
line 915: au BufNewFile,BufRead *.mgp^I^I^Isetf mgp
line 916: 
line 917: " Mail (for Elm, trn, mutt, muttng, rn, slrn, neomutt)
line 918: au BufNewFile,BufRead snd.\d\+,.letter,.letter.\d\+,.followup,.article,.article.\d\+,pico.\d\+,mutt{ng,}-*-\w\+,mutt[[:alnum:]_-]\\\{6\},neomutt-*-\w\+,neomutt[[:alnum:]_-]\\\{6\},ae\d\+.txt,/tmp/SLRN[0-9A-Z.]\+,*.eml setf mail
line 919: 
line 920: " Mail aliases
line 921: au BufNewFile,BufRead */etc/mail/aliases,*/etc/aliases^Isetf mailaliases
line 922: 
line 923: " Mailcap configuration file
line 924: au BufNewFile,BufRead .mailcap,mailcap^I^Isetf mailcap
line 925: 
line 926: " Makefile
line 927: au BufNewFile,BufRead *[mM]akefile,*.mk,*.mak,*.dsp setf make
line 928: 
line 929: " MakeIndex
line 930: au BufNewFile,BufRead *.ist,*.mst^I^Isetf ist
line 931: 
line 932: " Mallard
line 933: au BufNewFile,BufRead *.page^I^I^Isetf mallard
line 934: 
line 935: " Manpage
line 936: au BufNewFile,BufRead *.man^I^I^Isetf man
line 937: 
line 938: " Man config
line 939: au BufNewFile,BufRead */etc/man.conf,man.config^Isetf manconf
line 940: 
line 941: " Maple V
line 942: au BufNewFile,BufRead *.mv,*.mpl,*.mws^I^Isetf maple
line 943: 
line 944: " Map (UMN mapserver config file)
line 945: au BufNewFile,BufRead *.map^I^I^Isetf map
line 946: 
line 947: " Markdown
line 948: au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,*.md  setf markdown
line 949: 
line 950: " Mason
line 951: au BufNewFile,BufRead *.mason,*.mhtml,*.comp^Isetf mason
line 952: 
line 953: " Mathematica, Matlab, Murphi or Objective C
line 954: au BufNewFile,BufRead *.m^I^I^Icall dist#ft#FTm()
line 955: 
line 956: " Mathematica notebook
line 957: au BufNewFile,BufRead *.nb^I^I^Isetf mma
line 958: 
line 959: " Maya Extension Language
line 960: au BufNewFile,BufRead *.mel^I^I^Isetf mel
line 961: 
line 962: " Mercurial (hg) commit file
line 963: au BufNewFile,BufRead hg-editor-*.txt^I^Isetf hgcommit
line 964: 
line 965: " Mercurial config (looks like generic config file)
line 966: au BufNewFile,BufRead *.hgrc,*hgrc^I^Isetf cfg
line 967: 
line 968: " Messages (logs mostly)
line 969: au BufNewFile,BufRead */log/{auth,cron,daemon,debug,kern,lpr,mail,messages,news/news,syslog,user}{,.log,.err,.info,.warn,.crit,.notice}{,.[0-9]*,-[0-9]*} setf messages
line 970: 
line 971: " Metafont
line 972: au BufNewFile,BufRead *.mf^I^I^Isetf mf
line 973: 
line 974: " MetaPost
line 975: au BufNewFile,BufRead *.mp^I^I^Isetf mp
line 976: 
line 977: " MGL
line 978: au BufNewFile,BufRead *.mgl^I^I^Isetf mgl
line 979: 
line 980: " MIX - Knuth assembly
line 981: au BufNewFile,BufRead *.mix,*.mixal^I^Isetf mix
line 982: 
line 983: " MMIX or VMS makefile
line 984: au BufNewFile,BufRead *.mms^I^I^Icall dist#ft#FTmms()
line 985: 
line 986: " Symbian meta-makefile definition (MMP)
line 987: au BufNewFile,BufRead *.mmp^I^I^Isetf mmp
line 988: 
line 989: " Modsim III (or LambdaProlog)
line 995: au BufNewFile,BufRead *.mod if getline(1) =~ '\<module\>' |   setf lprolog | else |   setf modsim3 | endif
line 996: 
line 997: " Modula 2  (.md removed in favor of Markdown)
line 998: au BufNewFile,BufRead *.m2,*.DEF,*.MOD,*.mi^Isetf modula2
line 999: 
line 1000: " Modula 3 (.m3, .i3, .mg, .ig)
line 1001: au BufNewFile,BufRead *.[mi][3g]^I^Isetf modula3
line 1002: 
line 1003: " Monk
line 1004: au BufNewFile,BufRead *.isc,*.monk,*.ssc,*.tsc^Isetf monk
line 1005: 
line 1006: " MOO
line 1007: au BufNewFile,BufRead *.moo^I^I^Isetf moo
line 1008: 
line 1009: " Modconf
line 1010: au BufNewFile,BufRead */etc/modules.conf,*/etc/modules,*/etc/conf.modules setf modconf
line 1011: 
line 1012: " Mplayer config
line 1013: au BufNewFile,BufRead mplayer.conf,*/.mplayer/config^Isetf mplayerconf
line 1014: 
line 1015: " Motorola S record
line 1016: au BufNewFile,BufRead *.s19,*.s28,*.s37,*.mot,*.srec^Isetf srec
line 1017: 
line 1018: " Mrxvtrc
line 1019: au BufNewFile,BufRead mrxvtrc,.mrxvtrc^I^Isetf mrxvtrc
line 1020: 
line 1021: " Msql
line 1022: au BufNewFile,BufRead *.msql^I^I^Isetf msql
line 1023: 
line 1024: " Mysql
line 1025: au BufNewFile,BufRead *.mysql^I^I^Isetf mysql
line 1026: 
line 1027: " Mutt setup files (must be before catch *.rc)
line 1028: au BufNewFile,BufRead */etc/Muttrc.d/*^I^Icall s:StarSetf('muttrc')
line 1029: 
line 1030: " M$ Resource files
line 1031: au BufNewFile,BufRead *.rc,*.rch^I^Isetf rc
line 1032: 
line 1033: " MuPAD source
line 1034: au BufRead,BufNewFile *.mu^I^I^Isetf mupad
line 1035: 
line 1036: " Mush
line 1037: au BufNewFile,BufRead *.mush^I^I^Isetf mush
line 1038: 
line 1039: " Mutt setup file (also for Muttng)
line 1040: au BufNewFile,BufRead Mutt{ng,}rc^I^Isetf muttrc
line 1041: 
line 1042: " N1QL
line 1043: au BufRead,BufNewfile *.n1ql,*.nql^I^Isetf n1ql
line 1044: 
line 1045: " Nano
line 1046: au BufNewFile,BufRead */etc/nanorc,*.nanorc  ^Isetf nanorc
line 1047: 
line 1048: " Nastran input/DMAP
line 1049: "au BufNewFile,BufRead *.dat^I^I^Isetf nastran
line 1050: 
line 1051: " Natural
line 1052: au BufNewFile,BufRead *.NS[ACGLMNPS]^I^Isetf natural
line 1053: 
line 1054: " Noemutt setup file
line 1055: au BufNewFile,BufRead Neomuttrc^I^I^Isetf neomuttrc
line 1056: 
line 1057: " Netrc
line 1058: au BufNewFile,BufRead .netrc^I^I^Isetf netrc
line 1059: 
line 1060: " Ninja file
line 1061: au BufNewFile,BufRead *.ninja^I^I^Isetf ninja
line 1062: 
line 1063: " Novell netware batch files
line 1064: au BufNewFile,BufRead *.ncf^I^I^Isetf ncf
line 1065: 
line 1066: " Nroff/Troff (*.ms and *.t are checked below)
line 1070: au BufNewFile,BufRead *.me if expand("<afile>") != "read.me" && expand("<afile>") != "click.me" |   setf nroff | endif
line 1071: au BufNewFile,BufRead *.tr,*.nr,*.roff,*.tmac,*.mom^Isetf nroff
line 1072: au BufNewFile,BufRead *.[1-9]^I^I^Icall dist#ft#FTnroff()
line 1073: 
line 1074: " Nroff or Objective C++
line 1075: au BufNewFile,BufRead *.mm^I^I^Icall dist#ft#FTmm()
line 1076: 
line 1077: " Not Quite C
line 1078: au BufNewFile,BufRead *.nqc^I^I^Isetf nqc
line 1079: 
line 1080: " NSE - Nmap Script Engine - uses Lua syntax
line 1081: au BufNewFile,BufRead *.nse^I^I^Isetf lua
line 1082: 
line 1083: " NSIS
line 1084: au BufNewFile,BufRead *.nsi,*.nsh^I^Isetf nsis
line 1085: 
line 1086: " OCAML
line 1087: au BufNewFile,BufRead *.ml,*.mli,*.mll,*.mly,.ocamlinit^Isetf ocaml
line 1088: 
line 1089: " Occam
line 1090: au BufNewFile,BufRead *.occ^I^I^Isetf occam
line 1091: 
line 1092: " Omnimark
line 1093: au BufNewFile,BufRead *.xom,*.xin^I^Isetf omnimark
line 1094: 
line 1095: " OpenROAD
line 1096: au BufNewFile,BufRead *.or^I^I^Isetf openroad
line 1097: 
line 1098: " OPL
line 1099: au BufNewFile,BufRead *.[Oo][Pp][Ll]^I^Isetf opl
line 1100: 
line 1101: " Oracle config file
line 1102: au BufNewFile,BufRead *.ora^I^I^Isetf ora
line 1103: 
line 1104: " Packet filter conf
line 1105: au BufNewFile,BufRead pf.conf^I^I^Isetf pf
line 1106: 
line 1107: " Pam conf
line 1108: au BufNewFile,BufRead */etc/pam.conf^I^Isetf pamconf
line 1109: 
line 1110: " PApp
line 1111: au BufNewFile,BufRead *.papp,*.pxml,*.pxsl^Isetf papp
line 1112: 
line 1113: " Password file
line 1114: au BufNewFile,BufRead */etc/passwd,*/etc/passwd-,*/etc/passwd.edit,*/etc/shadow,*/etc/shadow-,*/etc/shadow.edit,*/var/backups/passwd.bak,*/var/backups/shadow.bak setf passwd
line 1115: 
line 1116: " Pascal (also *.p)
line 1117: au BufNewFile,BufRead *.pas^I^I^Isetf pascal
line 1118: 
line 1119: " Delphi project file
line 1120: au BufNewFile,BufRead *.dpr^I^I^Isetf pascal
line 1121: 
line 1122: " PDF
line 1123: au BufNewFile,BufRead *.pdf^I^I^Isetf pdf
line 1124: 
line 1125: " PCMK - HAE - crm configure edit 
line 1126: au BufNewFile,BufRead *.pcmk ^I^I^Isetf pcmk
line 1127: 
line 1128: " Perl
line 1129: if has("fname_case")
line 1130:   au BufNewFile,BufRead *.pl,*.PL^I^Icall dist#ft#FTpl()
line 1131: else
line 1132:   au BufNewFile,BufRead *.pl^I^I^Icall dist#ft#FTpl()
line 1133: endif
line 1134: au BufNewFile,BufRead *.plx,*.al,*.psgi^I^Isetf perl
line 1135: au BufNewFile,BufRead *.p6,*.pm6,*.pl6^I^Isetf perl6
line 1136: 
line 1137: " Perl, XPM or XPM2
line 1145: au BufNewFile,BufRead *.pm if getline(1) =~ "XPM2" |   setf xpm2 | elseif getline(1) =~ "XPM" |   setf xpm | else |   setf perl | endif
line 1146: 
line 1147: " Perl POD
line 1148: au BufNewFile,BufRead *.pod^I^I^Isetf pod
line 1149: au BufNewFile,BufRead *.pod6^I^I^Isetf pod6
line 1150: 
line 1151: " Php, php3, php4, etc.
line 1152: " Also Phtml (was used for PHP 2 in the past)
line 1153: " Also .ctp for Cake template file
line 1154: au BufNewFile,BufRead *.php,*.php\d,*.phtml,*.ctp^Isetf php
line 1155: 
line 1156: " Pike and Cmod
line 1157: au BufNewFile,BufRead *.pike,*.pmod^I^Isetf pike
line 1158: au BufNewFile,BufRead *.cmod^I^I^Isetf cmod
line 1159: 
line 1160: " Pinfo config
line 1161: au BufNewFile,BufRead */etc/pinforc,*/.pinforc^Isetf pinfo
line 1162: 
line 1163: " Palm Resource compiler
line 1164: au BufNewFile,BufRead *.rcp^I^I^Isetf pilrc
line 1165: 
line 1166: " Pine config
line 1167: au BufNewFile,BufRead .pinerc,pinerc,.pinercex,pinercex^I^Isetf pine
line 1168: 
line 1169: " PL/1, PL/I
line 1170: au BufNewFile,BufRead *.pli,*.pl1^I^Isetf pli
line 1171: 
line 1172: " PL/M (also: *.inp)
line 1173: au BufNewFile,BufRead *.plm,*.p36,*.pac^I^Isetf plm
line 1174: 
line 1175: " PL/SQL
line 1176: au BufNewFile,BufRead *.pls,*.plsql^I^Isetf plsql
line 1177: 
line 1178: " PLP
line 1179: au BufNewFile,BufRead *.plp^I^I^Isetf plp
line 1180: 
line 1181: " PO and PO template (GNU gettext)
line 1182: au BufNewFile,BufRead *.po,*.pot^I^Isetf po
line 1183: 
line 1184: " Postfix main config
line 1185: au BufNewFile,BufRead main.cf^I^I^Isetf pfmain
line 1186: 
line 1187: " PostScript (+ font files, encapsulated PostScript, Adobe Illustrator)
line 1188: au BufNewFile,BufRead *.ps,*.pfa,*.afm,*.eps,*.epsf,*.epsi,*.ai^I  setf postscr
line 1189: 
line 1190: " PostScript Printer Description
line 1191: au BufNewFile,BufRead *.ppd^I^I^Isetf ppd
line 1192: 
line 1193: " Povray
line 1194: au BufNewFile,BufRead *.pov^I^I^Isetf pov
line 1195: 
line 1196: " Povray configuration
line 1197: au BufNewFile,BufRead .povrayrc^I^I^Isetf povini
line 1198: 
line 1199: " Povray, PHP or assembly
line 1200: au BufNewFile,BufRead *.inc^I^I^Icall dist#ft#FTinc()
line 1201: 
line 1202: " Printcap and Termcap
line 1204: au BufNewFile,BufRead *printcap let b:ptcap_type = "print" | setf ptcap
line 1206: au BufNewFile,BufRead *termcap let b:ptcap_type = "term" | setf ptcap
line 1207: 
line 1208: " PCCTS / ANTRL
line 1209: "au BufNewFile,BufRead *.g^I^I^Isetf antrl
line 1210: au BufNewFile,BufRead *.g^I^I^Isetf pccts
line 1211: 
line 1212: " PPWizard
line 1213: au BufNewFile,BufRead *.it,*.ih^I^I^Isetf ppwiz
line 1214: 
line 1215: " Obj 3D file format
line 1216: " TODO: is there a way to avoid MS-Windows Object files?
line 1217: au BufNewFile,BufRead *.obj^I^I^Isetf obj
line 1218: 
line 1219: " Oracle Pro*C/C++
line 1220: au BufNewFile,BufRead *.pc^I^I^Isetf proc
line 1221: 
line 1222: " Privoxy actions file
line 1223: au BufNewFile,BufRead *.action^I^I^Isetf privoxy
line 1224: 
line 1225: " Procmail
line 1226: au BufNewFile,BufRead .procmail,.procmailrc^Isetf procmail
line 1227: 
line 1228: " Progress or CWEB
line 1229: au BufNewFile,BufRead *.w^I^I^Icall dist#ft#FTprogress_cweb()
line 1230: 
line 1231: " Progress or assembly
line 1232: au BufNewFile,BufRead *.i^I^I^Icall dist#ft#FTprogress_asm()
line 1233: 
line 1234: " Progress or Pascal
line 1235: au BufNewFile,BufRead *.p^I^I^Icall dist#ft#FTprogress_pascal()
line 1236: 
line 1237: " Software Distributor Product Specification File (POSIX 1387.2-1995)
line 1238: au BufNewFile,BufRead *.psf^I^I^Isetf psf
line 1242: au BufNewFile,BufRead INDEX,INFO if getline(1) =~ '^\s*\(distribution\|installed_software\|root\|bundle\|product\)\s*$' |   setf psf | endif
line 1243: 
line 1244: " Prolog
line 1245: au BufNewFile,BufRead *.pdb^I^I^Isetf prolog
line 1246: 
line 1247: " Promela
line 1248: au BufNewFile,BufRead *.pml^I^I^Isetf promela
line 1249: 
line 1250: " Google protocol buffers
line 1251: au BufNewFile,BufRead *.proto^I^I^Isetf proto
line 1252: 
line 1253: " Protocols
line 1254: au BufNewFile,BufRead */etc/protocols^I^Isetf protocols
line 1255: 
line 1256: " Pyrex
line 1257: au BufNewFile,BufRead *.pyx,*.pxd^I^Isetf pyrex
line 1258: 
line 1259: " Python, Python Shell Startup Files
line 1260: " Quixote (Python-based web framework)
line 1261: au BufNewFile,BufRead *.py,*.pyw,.pythonstartup,.pythonrc,*.ptl  setf python
line 1262: 
line 1263: " Radiance
line 1264: au BufNewFile,BufRead *.rad,*.mat^I^Isetf radiance
line 1265: 
line 1266: " Ratpoison config/command files
line 1267: au BufNewFile,BufRead .ratpoisonrc,ratpoisonrc^Isetf ratpoison
line 1268: 
line 1269: " RCS file
line 1270: au BufNewFile,BufRead *\,v^I^I^Isetf rcs
line 1271: 
line 1272: " Readline
line 1273: au BufNewFile,BufRead .inputrc,inputrc^I^Isetf readline
line 1274: 
line 1275: " Registry for MS-Windows
line 1277: au BufNewFile,BufRead *.reg if getline(1) =~? '^REGEDIT[0-9]*\s*$\|^Windows Registry Editor Version \d*\.\d*\s*$' | setf registry | endif
line 1278: 
line 1279: " Renderman Interface Bytestream
line 1280: au BufNewFile,BufRead *.rib^I^I^Isetf rib
line 1281: 
line 1282: " Rexx
line 1283: au BufNewFile,BufRead *.rex,*.orx,*.rxo,*.rxj,*.jrexx,*.rexxj,*.rexx,*.testGroup,*.testUnit^Isetf rexx
line 1284: 
line 1285: " R (Splus)
line 1286: if has("fname_case")
line 1287:   au BufNewFile,BufRead *.s,*.S^I^I^Isetf r
line 1288: else
line 1289:   au BufNewFile,BufRead *.s^I^I^Isetf r
line 1290: endif
line 1291: 
line 1292: " R Help file
line 1293: if has("fname_case")
line 1294:   au BufNewFile,BufRead *.rd,*.Rd^I^Isetf rhelp
line 1295: else
line 1296:   au BufNewFile,BufRead *.rd^I^I^Isetf rhelp
line 1297: endif
line 1298: 
line 1299: " R noweb file
line 1300: if has("fname_case")
line 1301:   au BufNewFile,BufRead *.Rnw,*.rnw,*.Snw,*.snw^I^Isetf rnoweb
line 1302: else
line 1303:   au BufNewFile,BufRead *.rnw,*.snw^I^I^Isetf rnoweb
line 1304: endif
line 1305: 
line 1306: " R Markdown file
line 1307: if has("fname_case")
line 1308:   au BufNewFile,BufRead *.Rmd,*.rmd,*.Smd,*.smd^I^Isetf rmd
line 1309: else
line 1310:   au BufNewFile,BufRead *.rmd,*.smd^I^I^Isetf rmd
line 1311: endif
line 1312: 
line 1313: " R reStructuredText file
line 1314: if has("fname_case")
line 1315:   au BufNewFile,BufRead *.Rrst,*.rrst,*.Srst,*.srst^Isetf rrst
line 1316: else
line 1317:   au BufNewFile,BufRead *.rrst,*.srst^I^I^Isetf rrst
line 1318: endif
line 1319: 
line 1320: " Rexx, Rebol or R
line 1321: au BufNewFile,BufRead *.r,*.R^I^I^I^Icall dist#ft#FTr()
line 1322: 
line 1323: " Remind
line 1324: au BufNewFile,BufRead .reminders,*.remind,*.rem^I^Isetf remind
line 1325: 
line 1326: " Resolv.conf
line 1327: au BufNewFile,BufRead resolv.conf^I^Isetf resolv
line 1328: 
line 1329: " Relax NG Compact
line 1330: au BufNewFile,BufRead *.rnc^I^I^Isetf rnc
line 1331: 
line 1332: " Relax NG XML
line 1333: au BufNewFile,BufRead *.rng^I^I^Isetf rng
line 1334: 
line 1335: " RPL/2
line 1336: au BufNewFile,BufRead *.rpl^I^I^Isetf rpl
line 1337: 
line 1338: " Robots.txt
line 1339: au BufNewFile,BufRead robots.txt^I^Isetf robots
line 1340: 
line 1341: " Rpcgen
line 1342: au BufNewFile,BufRead *.x^I^I^Isetf rpcgen
line 1343: 
line 1344: " reStructuredText Documentation Format
line 1345: au BufNewFile,BufRead *.rst^I^I^Isetf rst
line 1346: 
line 1347: " RTF
line 1348: au BufNewFile,BufRead *.rtf^I^I^Isetf rtf
line 1349: 
line 1350: " Interactive Ruby shell
line 1351: au BufNewFile,BufRead .irbrc,irbrc^I^Isetf ruby
line 1352: 
line 1353: " Ruby
line 1354: au BufNewFile,BufRead *.rb,*.rbw^I^Isetf ruby
line 1355: 
line 1356: " RubyGems
line 1357: au BufNewFile,BufRead *.gemspec^I^I^Isetf ruby
line 1358: 
line 1359: " Rust
line 1360: au BufNewFile,BufRead *.rs^I^I^Isetf rust
line 1361: 
line 1362: " Rackup
line 1363: au BufNewFile,BufRead *.ru^I^I^Isetf ruby
line 1364: 
line 1365: " Bundler
line 1366: au BufNewFile,BufRead Gemfile^I^I^Isetf ruby
line 1367: 
line 1368: " Ruby on Rails
line 1369: au BufNewFile,BufRead *.builder,*.rxml,*.rjs^Isetf ruby
line 1370: 
line 1371: " Rantfile and Rakefile is like Ruby
line 1372: au BufNewFile,BufRead [rR]antfile,*.rant,[rR]akefile,*.rake^Isetf ruby
line 1373: 
line 1374: " S-lang (or shader language, or SmallLisp)
line 1375: au BufNewFile,BufRead *.sl^I^I^Isetf slang
line 1376: 
line 1377: " Samba config
line 1378: au BufNewFile,BufRead smb.conf^I^I^Isetf samba
line 1379: 
line 1380: " SAS script
line 1381: au BufNewFile,BufRead *.sas^I^I^Isetf sas
line 1382: 
line 1383: " Sass
line 1384: au BufNewFile,BufRead *.sass^I^I^Isetf sass
line 1385: 
line 1386: " Sather
line 1387: au BufNewFile,BufRead *.sa^I^I^Isetf sather
line 1388: 
line 1389: " Scala
line 1390: au BufNewFile,BufRead *.scala^I^I^Isetf scala
line 1391: 
line 1392: " SBT - Scala Build Tool
line 1393: au BufNewFile,BufRead *.sbt^I^I^Isetf sbt
line 1394: 
line 1395: " Scilab
line 1396: au BufNewFile,BufRead *.sci,*.sce^I^Isetf scilab
line 1397: 
line 1398: " SCSS
line 1399: au BufNewFile,BufRead *.scss^I^I^Isetf scss
line 1400: 
line 1401: " SD: Streaming Descriptors
line 1402: au BufNewFile,BufRead *.sd^I^I^Isetf sd
line 1403: 
line 1404: " SDL
line 1405: au BufNewFile,BufRead *.sdl,*.pr^I^Isetf sdl
line 1406: 
line 1407: " sed
line 1408: au BufNewFile,BufRead *.sed^I^I^Isetf sed
line 1409: 
line 1410: " Sieve (RFC 3028)
line 1411: au BufNewFile,BufRead *.siv^I^I^Isetf sieve
line 1412: 
line 1413: " Sendmail
line 1414: au BufNewFile,BufRead sendmail.cf^I^Isetf sm
line 1415: 
line 1416: " Sendmail .mc files are actually m4.  Could also be MS Message text file.
line 1417: au BufNewFile,BufRead *.mc^I^I^Icall dist#ft#McSetf()
line 1418: 
line 1419: " Services
line 1420: au BufNewFile,BufRead */etc/services^I^Isetf services
line 1421: 
line 1422: " Service Location config
line 1423: au BufNewFile,BufRead */etc/slp.conf^I^Isetf slpconf
line 1424: 
line 1425: " Service Location registration
line 1426: au BufNewFile,BufRead */etc/slp.reg^I^Isetf slpreg
line 1427: 
line 1428: " Service Location SPI
line 1429: au BufNewFile,BufRead */etc/slp.spi^I^Isetf slpspi
line 1430: 
line 1431: " Setserial config
line 1432: au BufNewFile,BufRead */etc/serial.conf^I^Isetf setserial
line 1433: 
line 1434: " SGML
line 1444: au BufNewFile,BufRead *.sgm,*.sgml if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'linuxdoc' |   setf sgmllnx | elseif getline(1) =~ '<!DOCTYPE.*DocBook' || getline(2) =~ '<!DOCTYPE.*DocBook' |   let b:docbk_type = "sgml" |   let b:docbk_ver = 4 |   setf docbk | else |   setf sgml | endif
line 1445: 
line 1446: " SGMLDECL
line 1450: au BufNewFile,BufRead *.decl,*.dcl,*.dec if getline(1).getline(2).getline(3) =~? '^<!SGML' |    setf sgmldecl | endif
line 1451: 
line 1452: " SGML catalog file
line 1453: au BufNewFile,BufRead catalog^I^I^Isetf catalog
line 1454: au BufNewFile,BufRead sgml.catalog*^I^Icall s:StarSetf('catalog')
line 1455: 
line 1456: " Shell scripts (sh, ksh, bash, bash2, csh); Allow .profile_foo etc.
line 1457: " Gentoo ebuilds and Arch Linux PKGBUILDs are actually bash scripts
line 1458: au BufNewFile,BufRead .bashrc*,bashrc,bash.bashrc,.bash[_-]profile*,.bash[_-]logout*,.bash[_-]aliases*,*.bash,*/{,.}bash[_-]completion{,.d,.sh}{,/*},*.ebuild,*.eclass,PKGBUILD* call dist#ft#SetFileTypeSH("bash")
line 1459: au BufNewFile,BufRead .kshrc*,*.ksh call dist#ft#SetFileTypeSH("ksh")
line 1460: au BufNewFile,BufRead */etc/profile,.profile*,*.sh,*.env call dist#ft#SetFileTypeSH(getline(1))
line 1461: 
line 1462: " Shell script (Arch Linux) or PHP file (Drupal)
line 1468: au BufNewFile,BufRead *.install if getline(1) =~ '<?php' |   setf php | else |   call dist#ft#SetFileTypeSH("bash") | endif
line 1469: 
line 1470: " tcsh scripts
line 1471: au BufNewFile,BufRead .tcshrc*,*.tcsh,tcsh.tcshrc,tcsh.login^Icall dist#ft#SetFileTypeShell("tcsh")
line 1472: 
line 1473: " csh scripts, but might also be tcsh scripts (on some systems csh is tcsh)
line 1474: au BufNewFile,BufRead .login*,.cshrc*,csh.cshrc,csh.login,csh.logout,*.csh,.alias  call dist#ft#CSH()
line 1475: 
line 1476: " Z-Shell script
line 1477: au BufNewFile,BufRead .zprofile,*/etc/zprofile,.zfbfmarks  setf zsh
line 1478: au BufNewFile,BufRead .zsh*,.zlog*,.zcompdump*  call s:StarSetf('zsh')
line 1479: au BufNewFile,BufRead *.zsh^I^I^Isetf zsh
line 1480: 
line 1481: " Scheme
line 1482: au BufNewFile,BufRead *.scm,*.ss,*.rkt^I^Isetf scheme
line 1483: 
line 1484: " Screen RC
line 1485: au BufNewFile,BufRead .screenrc,screenrc^Isetf screen
line 1486: 
line 1487: " Simula
line 1488: au BufNewFile,BufRead *.sim^I^I^Isetf simula
line 1489: 
line 1490: " SINDA
line 1491: au BufNewFile,BufRead *.sin,*.s85^I^Isetf sinda
line 1492: 
line 1493: " SiSU
line 1494: au BufNewFile,BufRead *.sst,*.ssm,*.ssi,*.-sst,*._sst setf sisu
line 1495: au BufNewFile,BufRead *.sst.meta,*.-sst.meta,*._sst.meta setf sisu
line 1496: 
line 1497: " SKILL
line 1498: au BufNewFile,BufRead *.il,*.ils,*.cdf^I^Isetf skill
line 1499: 
line 1500: " SLRN
line 1501: au BufNewFile,BufRead .slrnrc^I^I^Isetf slrnrc
line 1502: au BufNewFile,BufRead *.score^I^I^Isetf slrnsc
line 1503: 
line 1504: " Smalltalk (and TeX)
line 1505: au BufNewFile,BufRead *.st^I^I^Isetf st
line 1513: au BufNewFile,BufRead *.cls if getline(1) =~ '^%' |  setf tex | elseif getline(1)[0] == '#' && getline(1) =~ 'rexx' |  setf rexx | else |  setf st | endif
line 1514: 
line 1515: " Smarty templates
line 1516: au BufNewFile,BufRead *.tpl^I^I^Isetf smarty
line 1517: 
line 1518: " SMIL or XML
line 1524: au BufNewFile,BufRead *.smil if getline(1) =~ '<?\s*xml.*?>' |   setf xml | else |   setf smil | endif
line 1525: 
line 1526: " SMIL or SNMP MIB file
line 1532: au BufNewFile,BufRead *.smi if getline(1) =~ '\<smil\>' |   setf smil | else |   setf mib | endif
line 1533: 
line 1534: " SMITH
line 1535: au BufNewFile,BufRead *.smt,*.smith^I^Isetf smith
line 1536: 
line 1537: " Snobol4 and spitbol
line 1538: au BufNewFile,BufRead *.sno,*.spt^I^Isetf snobol4
line 1539: 
line 1540: " SNMP MIB files
line 1541: au BufNewFile,BufRead *.mib,*.my^I^Isetf mib
line 1542: 
line 1543: " Snort Configuration
line 1544: au BufNewFile,BufRead *.hog,snort.conf,vision.conf^Isetf hog
line 1545: au BufNewFile,BufRead *.rules^I^I^Icall dist#ft#FTRules()
line 1546: 
line 1547: " Spec (Linux RPM)
line 1548: au BufNewFile,BufRead *.spec^I^I^Isetf spec
line 1549: 
line 1550: " Speedup (AspenTech plant simulator)
line 1551: au BufNewFile,BufRead *.speedup,*.spdata,*.spd^Isetf spup
line 1552: 
line 1553: " Slice
line 1554: au BufNewFile,BufRead *.ice^I^I^Isetf slice
line 1555: 
line 1556: " Spice
line 1557: au BufNewFile,BufRead *.sp,*.spice^I^Isetf spice
line 1558: 
line 1559: " Spyce
line 1560: au BufNewFile,BufRead *.spy,*.spi^I^Isetf spyce
line 1561: 
line 1562: " Squid
line 1563: au BufNewFile,BufRead squid.conf^I^Isetf squid
line 1564: 
line 1565: " SQL for Oracle Designer
line 1566: au BufNewFile,BufRead *.tyb,*.typ,*.tyc,*.pkb,*.pks^Isetf sql
line 1567: 
line 1568: " SQL
line 1569: au BufNewFile,BufRead *.sql^I^I^Icall dist#ft#SQL()
line 1570: 
line 1571: " SQLJ
line 1572: au BufNewFile,BufRead *.sqlj^I^I^Isetf sqlj
line 1573: 
line 1574: " SQR
line 1575: au BufNewFile,BufRead *.sqr,*.sqi^I^Isetf sqr
line 1576: 
line 1577: " OpenSSH configuration
line 1578: au BufNewFile,BufRead ssh_config,*/.ssh/config^Isetf sshconfig
line 1579: 
line 1580: " OpenSSH server configuration
line 1581: au BufNewFile,BufRead sshd_config^I^Isetf sshdconfig
line 1582: 
line 1583: " Stata
line 1584: au BufNewFile,BufRead *.ado,*.do,*.imata,*.mata^Isetf stata
line 1585: " Also *.class, but not when it's a Java bytecode file
line 1587: au BufNewFile,BufRead *.class if getline(1) !~ "^\xca\xfe\xba\xbe" | setf stata | endif
line 1588: 
line 1589: " SMCL
line 1590: au BufNewFile,BufRead *.hlp,*.ihlp,*.smcl^Isetf smcl
line 1591: 
line 1592: " Stored Procedures
line 1593: au BufNewFile,BufRead *.stp^I^I^Isetf stp
line 1594: 
line 1595: " Standard ML
line 1596: au BufNewFile,BufRead *.sml^I^I^Isetf sml
line 1597: 
line 1598: " Sratus VOS command macro
line 1599: au BufNewFile,BufRead *.cm^I^I^Isetf voscm
line 1600: 
line 1601: " Sysctl
line 1602: au BufNewFile,BufRead */etc/sysctl.conf,*/etc/sysctl.d/*.conf^Isetf sysctl
line 1603: 
line 1604: " Systemd unit files
line 1605: au BufNewFile,BufRead */systemd/*.{automount,mount,path,service,socket,swap,target,timer}^Isetf systemd
line 1606: 
line 1607: " Synopsys Design Constraints
line 1608: au BufNewFile,BufRead *.sdc^I^I^Isetf sdc
line 1609: 
line 1610: " Sudoers
line 1611: au BufNewFile,BufRead */etc/sudoers,sudoers.tmp^Isetf sudoers
line 1612: 
line 1613: " SVG (Scalable Vector Graphics)
line 1614: au BufNewFile,BufRead *.svg^I^I^Isetf svg
line 1615: 
line 1616: " Tads (or Nroff or Perl test file)
line 1618: au BufNewFile,BufRead *.t if !dist#ft#FTnroff() && !dist#ft#FTperl() | setf tads | endif
line 1619: 
line 1620: " Tags
line 1621: au BufNewFile,BufRead tags^I^I^Isetf tags
line 1622: 
line 1623: " TAK
line 1624: au BufNewFile,BufRead *.tak^I^I^Isetf tak
line 1625: 
line 1626: " Task
line 1627: au BufRead,BufNewFile {pending,completed,undo}.data  setf taskdata
line 1628: au BufRead,BufNewFile *.task^I^I^Isetf taskedit
line 1629: 
line 1630: " Tcl (JACL too)
line 1631: au BufNewFile,BufRead *.tcl,*.tk,*.itcl,*.itk,*.jacl^Isetf tcl
line 1632: 
line 1633: " TealInfo
line 1634: au BufNewFile,BufRead *.tli^I^I^Isetf tli
line 1635: 
line 1636: " Telix Salt
line 1637: au BufNewFile,BufRead *.slt^I^I^Isetf tsalt
line 1638: 
line 1639: " Tera Term Language
line 1640: au BufRead,BufNewFile *.ttl^I^I^Isetf teraterm
line 1641: 
line 1642: " Terminfo
line 1643: au BufNewFile,BufRead *.ti^I^I^Isetf terminfo
line 1644: 
line 1645: " TeX
line 1646: au BufNewFile,BufRead *.latex,*.sty,*.dtx,*.ltx,*.bbl^Isetf tex
line 1647: au BufNewFile,BufRead *.tex^I^I^Icall dist#ft#FTtex()
line 1648: 
line 1649: " ConTeXt
line 1650: au BufNewFile,BufRead *.mkii,*.mkiv,*.mkvi   setf context
line 1651: 
line 1652: " Texinfo
line 1653: au BufNewFile,BufRead *.texinfo,*.texi,*.txi^Isetf texinfo
line 1654: 
line 1655: " TeX configuration
line 1656: au BufNewFile,BufRead texmf.cnf^I^I^Isetf texmf
line 1657: 
line 1658: " Tidy config
line 1659: au BufNewFile,BufRead .tidyrc,tidyrc^I^Isetf tidy
line 1660: 
line 1661: " TF mud client
line 1662: au BufNewFile,BufRead *.tf,.tfrc,tfrc^I^Isetf tf
line 1663: 
line 1664: " tmux configuration
line 1665: au BufNewFile,BufRead {.,}tmux*.conf^I^Isetf tmux
line 1666: 
line 1667: " TPP - Text Presentation Program
line 1668: au BufNewFile,BufReadPost *.tpp^I^I^Isetf tpp
line 1669: 
line 1670: " Treetop
line 1671: au BufRead,BufNewFile *.treetop^I^I^Isetf treetop
line 1672: 
line 1673: " Trustees
line 1674: au BufNewFile,BufRead trustees.conf^I^Isetf trustees
line 1675: 
line 1676: " TSS - Geometry
line 1677: au BufNewFile,BufReadPost *.tssgm^I^Isetf tssgm
line 1678: 
line 1679: " TSS - Optics
line 1680: au BufNewFile,BufReadPost *.tssop^I^Isetf tssop
line 1681: 
line 1682: " TSS - Command Line (temporary)
line 1683: au BufNewFile,BufReadPost *.tsscl^I^Isetf tsscl
line 1684: 
line 1685: " TWIG files
line 1686: au BufNewFile,BufReadPost *.twig^I^Isetf twig
line 1687: 
line 1688: " Motif UIT/UIL files
line 1689: au BufNewFile,BufRead *.uit,*.uil^I^Isetf uil
line 1690: 
line 1691: " Udev conf
line 1692: au BufNewFile,BufRead */etc/udev/udev.conf^Isetf udevconf
line 1693: 
line 1694: " Udev permissions
line 1695: au BufNewFile,BufRead */etc/udev/permissions.d/*.permissions setf udevperm
line 1696: "
line 1697: " Udev symlinks config
line 1698: au BufNewFile,BufRead */etc/udev/cdsymlinks.conf^Isetf sh
line 1699: 
line 1700: " UnrealScript
line 1701: au BufNewFile,BufRead *.uc^I^I^Isetf uc
line 1702: 
line 1703: " Updatedb
line 1704: au BufNewFile,BufRead */etc/updatedb.conf^Isetf updatedb
line 1705: 
line 1706: " Upstart (init(8)) config files
line 1707: au BufNewFile,BufRead */usr/share/upstart/*.conf^I       setf upstart
line 1708: au BufNewFile,BufRead */usr/share/upstart/*.override^I       setf upstart
line 1709: au BufNewFile,BufRead */etc/init/*.conf,*/etc/init/*.override  setf upstart
line 1710: au BufNewFile,BufRead */.init/*.conf,*/.init/*.override^I       setf upstart
line 1711: au BufNewFile,BufRead */.config/upstart/*.conf^I^I       setf upstart
line 1712: au BufNewFile,BufRead */.config/upstart/*.override^I       setf upstart
line 1713: 
line 1714: " Vera
line 1715: au BufNewFile,BufRead *.vr,*.vri,*.vrh^I^Isetf vera
line 1716: 
line 1717: " Verilog HDL
line 1718: au BufNewFile,BufRead *.v^I^I^Isetf verilog
line 1719: 
line 1720: " Verilog-AMS HDL
line 1721: au BufNewFile,BufRead *.va,*.vams^I^Isetf verilogams
line 1722: 
line 1723: " SystemVerilog
line 1724: au BufNewFile,BufRead *.sv,*.svh^I^Isetf systemverilog
line 1725: 
line 1726: " VHDL
line 1727: au BufNewFile,BufRead *.hdl,*.vhd,*.vhdl,*.vbe,*.vst  setf vhdl
line 1728: au BufNewFile,BufRead *.vhdl_[0-9]*^I^Icall s:StarSetf('vhdl')
line 1729: 
line 1730: " Vim script
line 1731: au BufNewFile,BufRead *.vim,*.vba,.exrc,_exrc^Isetf vim
line 1732: 
line 1733: " Viminfo file
line 1734: au BufNewFile,BufRead .viminfo,_viminfo^I^Isetf viminfo
line 1735: 
line 1736: " Virata Config Script File or Drupal module
line 1742: au BufRead,BufNewFile *.hw,*.module,*.pkg if getline(1) =~ '<?php' |   setf php | else |   setf virata | endif
line 1743: 
line 1744: " Visual Basic (also uses *.bas) or FORM
line 1745: au BufNewFile,BufRead *.frm^I^I^Icall dist#ft#FTVB("form")
line 1746: 
line 1747: " SaxBasic is close to Visual Basic
line 1748: au BufNewFile,BufRead *.sba^I^I^Isetf vb
line 1749: 
line 1750: " Vgrindefs file
line 1751: au BufNewFile,BufRead vgrindefs^I^I^Isetf vgrindefs
line 1752: 
line 1753: " VRML V1.0c
line 1754: au BufNewFile,BufRead *.wrl^I^I^Isetf vrml
line 1755: 
line 1756: " Vroom (vim testing and executable documentation)
line 1757: au BufNewFile,BufRead *.vroom^I^I^Isetf vroom
line 1758: 
line 1759: " Webmacro
line 1760: au BufNewFile,BufRead *.wm^I^I^Isetf webmacro
line 1761: 
line 1762: " Wget config
line 1763: au BufNewFile,BufRead .wgetrc,wgetrc^I^Isetf wget
line 1764: 
line 1765: " Website MetaLanguage
line 1766: au BufNewFile,BufRead *.wml^I^I^Isetf wml
line 1767: 
line 1768: " Winbatch
line 1769: au BufNewFile,BufRead *.wbt^I^I^Isetf winbatch
line 1770: 
line 1771: " WSML
line 1772: au BufNewFile,BufRead *.wsml^I^I^Isetf wsml
line 1773: 
line 1774: " WPL
line 1775: au BufNewFile,BufRead *.wpl^I^I^Isetf xml
line 1776: 
line 1777: " WvDial
line 1778: au BufNewFile,BufRead wvdial.conf,.wvdialrc^Isetf wvdial
line 1779: 
line 1780: " CVS RC file
line 1781: au BufNewFile,BufRead .cvsrc^I^I^Isetf cvsrc
line 1782: 
line 1783: " CVS commit file
line 1784: au BufNewFile,BufRead cvs\d\+^I^I^Isetf cvs
line 1785: 
line 1786: " WEB (*.web is also used for Winbatch: Guess, based on expecting "%" comment
line 1787: " lines in a WEB file).
line 1793: au BufNewFile,BufRead *.web if getline(1)[0].getline(2)[0].getline(3)[0].getline(4)[0].getline(5)[0] =~ "%" |   setf web | else |   setf winbatch | endif
line 1794: 
line 1795: " Windows Scripting Host and Windows Script Component
line 1796: au BufNewFile,BufRead *.ws[fc]^I^I^Isetf wsh
line 1797: 
line 1798: " XHTML
line 1799: au BufNewFile,BufRead *.xhtml,*.xht^I^Isetf xhtml
line 1800: 
line 1801: " X Pixmap (dynamically sets colors, use BufEnter to make it work better)
line 1807: au BufEnter *.xpm if getline(1) =~ "XPM2" |   setf xpm2 | else |   setf xpm | endif
line 1808: au BufEnter *.xpm2^I^I^I^Isetf xpm2
line 1809: 
line 1810: " XFree86 config
line 1815: au BufNewFile,BufRead XF86Config if getline(1) =~ '\<XConfigurator\>' |   let b:xf86conf_xfree86_version = 3 | endif | setf xf86conf
line 1818: au BufNewFile,BufRead */xorg.conf.d/*.conf let b:xf86conf_xfree86_version = 4 | setf xf86conf
line 1819: 
line 1820: " Xorg config
line 1821: au BufNewFile,BufRead xorg.conf,xorg.conf-4^Ilet b:xf86conf_xfree86_version = 4 | setf xf86conf
line 1822: 
line 1823: " Xinetd conf
line 1824: au BufNewFile,BufRead */etc/xinetd.conf^I^Isetf xinetd
line 1825: 
line 1826: " XS Perl extension interface language
line 1827: au BufNewFile,BufRead *.xs^I^I^Isetf xs
line 1828: 
line 1829: " X resources file
line 1830: au BufNewFile,BufRead .Xdefaults,.Xpdefaults,.Xresources,xdm-config,*.ad setf xdefaults
line 1831: 
line 1832: " Xmath
line 1833: au BufNewFile,BufRead *.msc,*.msf^I^Isetf xmath
line 1835: au BufNewFile,BufRead *.ms if !dist#ft#FTnroff() | setf xmath | endif
line 1836: 
line 1837: " XML  specific variants: docbk and xbl
line 1838: au BufNewFile,BufRead *.xml^I^I^Icall dist#ft#FTxml()
line 1839: 
line 1840: " XMI (holding UML models) is also XML
line 1841: au BufNewFile,BufRead *.xmi^I^I^Isetf xml
line 1842: 
line 1843: " CSPROJ files are Visual Studio.NET's XML-based project config files
line 1844: au BufNewFile,BufRead *.csproj,*.csproj.user^Isetf xml
line 1845: 
line 1846: " Qt Linguist translation source and Qt User Interface Files are XML
line 1847: au BufNewFile,BufRead *.ts,*.ui^I^I^Isetf xml
line 1848: 
line 1849: " TPM's are RDF-based descriptions of TeX packages (Nikolai Weibull)
line 1850: au BufNewFile,BufRead *.tpm^I^I^Isetf xml
line 1851: 
line 1852: " Xdg menus
line 1853: au BufNewFile,BufRead */etc/xdg/menus/*.menu^Isetf xml
line 1854: 
line 1855: " ATI graphics driver configuration
line 1856: au BufNewFile,BufRead fglrxrc^I^I^Isetf xml
line 1857: 
line 1858: " XLIFF (XML Localisation Interchange File Format) is also XML
line 1859: au BufNewFile,BufRead *.xlf^I^I^Isetf xml
line 1860: au BufNewFile,BufRead *.xliff^I^I^Isetf xml
line 1861: 
line 1862: " XML User Interface Language
line 1863: au BufNewFile,BufRead *.xul^I^I^Isetf xml
line 1864: 
line 1865: " X11 xmodmap (also see below)
line 1866: au BufNewFile,BufRead *Xmodmap^I^I^Isetf xmodmap
line 1867: 
line 1868: " Xquery
line 1869: au BufNewFile,BufRead *.xq,*.xql,*.xqm,*.xquery,*.xqy^Isetf xquery
line 1870: 
line 1871: " XSD
line 1872: au BufNewFile,BufRead *.xsd^I^I^Isetf xsd
line 1873: 
line 1874: " Xslt
line 1875: au BufNewFile,BufRead *.xsl,*.xslt^I^Isetf xslt
line 1876: 
line 1877: " Yacc
line 1878: au BufNewFile,BufRead *.yy,*.yxx,*.y++^I^Isetf yacc
line 1879: 
line 1880: " Yacc or racc
line 1881: au BufNewFile,BufRead *.y^I^I^Icall dist#ft#FTy()
line 1882: 
line 1883: " Yaml or Raml
line 1884: au BufNewFile,BufRead *.yaml,*.yml,*.raml^Isetf yaml
line 1885: 
line 1886: " yum conf (close enough to dosini)
line 1887: au BufNewFile,BufRead */etc/yum.conf^I^Isetf dosini
line 1888: 
line 1889: " Zimbu
line 1890: au BufNewFile,BufRead *.zu^I^I^Isetf zimbu
line 1891: " Zimbu Templates
line 1892: au BufNewFile,BufRead *.zut^I^I^Isetf zimbutempl
line 1893: 
line 1894: " Zope
line 1895: "   dtml (zope dynamic template markup language), pt (zope page template),
line 1896: "   cpt (zope form controller page template)
line 1897: au BufNewFile,BufRead *.dtml,*.pt,*.cpt^I^Icall dist#ft#FThtml()
line 1898: "   zsql (zope sql method)
line 1899: au BufNewFile,BufRead *.zsql^I^I^Icall dist#ft#SQL()
line 1900: 
line 1901: " Z80 assembler asz80
line 1902: au BufNewFile,BufRead *.z8a^I^I^Isetf z8a
line 1903: 
line 1904: augroup END
line 1905: 
line 1906: 
line 1907: " Source the user-specified filetype file, for backwards compatibility with
line 1908: " Vim 5.x.
line 1909: if exists("myfiletypefile") && filereadable(expand(myfiletypefile))
line 1910:   execute "source " . myfiletypefile
line 1911: endif
line 1912: 
line 1913: 
line 1914: " Check for "*" after loading myfiletypefile, so that scripts.vim is only used
line 1915: " when there are no matching file name extensions.
line 1916: " Don't do this for compressed files.
line 1917: augroup filetypedetect
line 1920: au BufNewFile,BufRead * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
line 1921: au StdinReadPost * if !did_filetype() | runtime! scripts.vim | endif
line 1922: 
line 1923: 
line 1924: " Extra checks for when no filetype has been detected now.  Mostly used for
line 1925: " patterns that end in "*".  E.g., "zsh*" matches "zsh.vim", but that's a Vim
line 1926: " script file.
line 1927: " Most of these should call s:StarSetf() to avoid names ending in .gz and the
line 1928: " like are used.
line 1929: 
line 1930: " More Apache style config files
line 1931: au BufNewFile,BufRead */etc/proftpd/*.conf*,*/etc/proftpd/conf.*/*^Icall s:StarSetf('apachestyle')
line 1932: 
line 1933: " More Apache config files
line 1934: au BufNewFile,BufRead access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*^Icall s:StarSetf('apache')
line 1935: au BufNewFile,BufRead */etc/apache2/*.conf*,*/etc/apache2/conf.*/*,*/etc/apache2/mods-*/*,*/etc/apache2/sites-*/*,*/etc/httpd/conf.d/*.conf*^I^Icall s:StarSetf('apache')
line 1936: 
line 1937: " Asterisk config file
line 1938: au BufNewFile,BufRead *asterisk/*.conf*^I^Icall s:StarSetf('asterisk')
line 1939: au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')
line 1940: 
line 1941: " Bazaar version control
line 1942: au BufNewFile,BufRead bzr_log.*^I^I^Isetf bzr
line 1943: 
line 1944: " Bazel build file
line 1945: if !has("fname_case")
line 1946:   au BufNewFile,BufRead BUILD^I^I^Isetf bzl
line 1947: endif
line 1948: 
line 1949: " BIND zone
line 1950: au BufNewFile,BufRead */named/db.*,*/bind/db.*^Icall s:StarSetf('bindzone')
line 1951: 
line 1952: " Calendar
line 1955: au BufNewFile,BufRead */.calendar/*,*/share/calendar/*/calendar.*,*/share/calendar/calendar.*^I^I^I^I^Icall s:StarSetf('calendar')
line 1956: 
line 1957: " Changelog
line 1963: au BufNewFile,BufRead [cC]hange[lL]og* if getline(1) =~ '; urgency='|  call s:StarSetf('debchangelog')|else|  call s:StarSetf('changelog')|endif
line 1964: 
line 1965: " Crontab
line 1966: au BufNewFile,BufRead crontab,crontab.*,*/etc/cron.d/*^I^Icall s:StarSetf('crontab')
line 1967: 
line 1968: " dnsmasq(8) configuration
line 1969: au BufNewFile,BufRead */etc/dnsmasq.d/*^I^Icall s:StarSetf('dnsmasq')
line 1970: 
line 1971: " Dracula
line 1972: au BufNewFile,BufRead drac.*^I^I^Icall s:StarSetf('dracula')
line 1973: 
line 1974: " Fvwm
line 1975: au BufNewFile,BufRead */.fvwm/*^I^I^Icall s:StarSetf('fvwm')
line 1977: au BufNewFile,BufRead *fvwmrc*,*fvwm95*.hook let b:fvwm_version = 1 | call s:StarSetf('fvwm')
line 1983: au BufNewFile,BufRead *fvwm2rc* if expand("<afile>:e") == "m4"|  call s:StarSetf('fvwm2m4')|else|  let b:fvwm_version = 2 | call s:StarSetf('fvwm')|endif
line 1984: 
line 1985: " Gedcom
line 1986: au BufNewFile,BufRead */tmp/lltmp*^I^Icall s:StarSetf('gedcom')
line 1987: 
line 1988: " GTK RC
line 1989: au BufNewFile,BufRead .gtkrc*,gtkrc*^I^Icall s:StarSetf('gtkrc')
line 1990: 
line 1991: " Jam
line 1992: au BufNewFile,BufRead Prl*.*,JAM*.*^I^Icall s:StarSetf('jam')
line 1993: 
line 1994: " Jargon
line 1998: au! BufNewFile,BufRead *jarg* if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'|  call s:StarSetf('jargon')|endif
line 1999: 
line 2000: " Kconfig
line 2001: au BufNewFile,BufRead Kconfig.*^I^I^Icall s:StarSetf('kconfig')
line 2002: 
line 2003: " Lilo: Linux loader
line 2004: au BufNewFile,BufRead lilo.conf*^I^Icall s:StarSetf('lilo')
line 2005: 
line 2006: " Logcheck
line 2007: au BufNewFile,BufRead */etc/logcheck/*.d*/*^Icall s:StarSetf('logcheck')
line 2008: 
line 2009: " Makefile
line 2010: au BufNewFile,BufRead [mM]akefile*^I^Icall s:StarSetf('make')
line 2011: 
line 2012: " Ruby Makefile
line 2013: au BufNewFile,BufRead [rR]akefile*^I^Icall s:StarSetf('ruby')
line 2014: 
line 2015: " Mail (also matches muttrc.vim, so this is below the other checks)
line 2016: au BufNewFile,BufRead {neo,}mutt[[:alnum:]._-]\\\{6\}^Isetf mail
line 2017: 
line 2018: au BufNewFile,BufRead reportbug-*^I^Icall s:StarSetf('mail')
line 2019: 
line 2020: " Modconf
line 2024: au BufNewFile,BufRead */etc/modutils/* if executable(expand("<afile>")) != 1|  call s:StarSetf('modconf')|endif
line 2025: au BufNewFile,BufRead */etc/modprobe.*^I^Icall s:StarSetf('modconf')
line 2026: 
line 2027: " Mutt setup file
line 2028: au BufNewFile,BufRead .mutt{ng,}rc*,*/.mutt{ng,}/mutt{ng,}rc*^Icall s:StarSetf('muttrc')
line 2029: au BufNewFile,BufRead mutt{ng,}rc*,Mutt{ng,}rc*^I^Icall s:StarSetf('muttrc')
line 2030: 
line 2031: " Neomutt setup file
line 2032: au BufNewFile,BufRead .neomuttrc*,*/.neomutt/neomuttrc*^Icall s:StarSetf('neomuttrc')
line 2033: au BufNewFile,BufRead neomuttrc*,Neomuttrc*^I^Icall s:StarSetf('neomuttrc')
line 2034: 
line 2035: " Nroff macros
line 2036: au BufNewFile,BufRead tmac.*^I^I^Icall s:StarSetf('nroff')
line 2037: 
line 2038: " OpenBSD hostname.if
line 2039: au BufNewFile,BufRead /etc/hostname.*^I^Icall s:StarSetf('config')
line 2040: 
line 2041: " Pam conf
line 2042: au BufNewFile,BufRead */etc/pam.d/*^I^Icall s:StarSetf('pamconf')
line 2043: 
line 2044: " Printcap and Termcap
line 2048: au BufNewFile,BufRead *printcap* if !did_filetype()|  let b:ptcap_type = "print" | call s:StarSetf('ptcap')|endif
line 2052: au BufNewFile,BufRead *termcap* if !did_filetype()|  let b:ptcap_type = "term" | call s:StarSetf('ptcap')|endif
line 2053: 
line 2054: " ReDIF
line 2055: " Only used when the .rdf file was not detected to be XML.
line 2056: au BufRead,BufNewFile *.rdf^I^I^Icall dist#ft#Redif()
line 2057: 
line 2058: " Remind
line 2059: au BufNewFile,BufRead .reminders*^I^Icall s:StarSetf('remind')
line 2060: 
line 2061: " Vim script
line 2062: au BufNewFile,BufRead *vimrc*^I^I^Icall s:StarSetf('vim')
line 2063: 
line 2064: " Subversion commit file
line 2065: au BufNewFile,BufRead svn-commit*.tmp^I^Isetf svn
line 2066: 
line 2067: " X resources file
line 2068: au BufNewFile,BufRead Xresources*,*/app-defaults/*,*/Xresources/* call s:StarSetf('xdefaults')
line 2069: 
line 2070: " XFree86 config
line 2072: au BufNewFile,BufRead XF86Config-4* let b:xf86conf_xfree86_version = 4 | call s:StarSetf('xf86conf')
line 2077: au BufNewFile,BufRead XF86Config* if getline(1) =~ '\<XConfigurator\>'|  let b:xf86conf_xfree86_version = 3|endif|call s:StarSetf('xf86conf')
line 2078: 
line 2079: " X11 xmodmap
line 2080: au BufNewFile,BufRead *xmodmap*^I^I^Icall s:StarSetf('xmodmap')
line 2081: 
line 2082: " Xinetd conf
line 2083: au BufNewFile,BufRead */etc/xinetd.d/*^I^Icall s:StarSetf('xinetd')
line 2084: 
line 2085: " yum conf (close enough to dosini)
line 2086: au BufNewFile,BufRead */etc/yum.repos.d/*^Icall s:StarSetf('dosini')
line 2087: 
line 2088: " Z-Shell script
line 2089: au BufNewFile,BufRead zsh*,zlog*^I^Icall s:StarSetf('zsh')
line 2090: 
line 2091: 
line 2092: " Plain text files, needs to be far down to not override others.  This avoids
line 2093: " the "conf" type being used if there is a line starting with '#'.
line 2094: au BufNewFile,BufRead *.text,README^I^Isetf text
line 2095: 
line 2096: " Help files match *.txt but should have a last line that is a modeline.
line 2100: au BufNewFile,BufRead *.txt^I  if getline('$') !~ 'vim:.*ft=help'|   setf text| endif
line 2101: 
line 2102: 
line 2103: " Use the filetype detect plugins.  They may overrule any of the previously
line 2104: " detected filetypes.
line 2105: runtime! ftdetect/*.vim
Searching for "ftdetect/*.vim" in "/Users/marco/.vim,/Users/marco/.vim/bundle/vim-prettier,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/marco/.vim/after,/Users/marco/.vim/bundle/Vundle.vim,/Users/marco/.vim/bundle/vim-prettier/after"
Searching for "/Users/marco/.vim/ftdetect/*.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/ftdetect/*.vim"
chdir(/Users/marco/.vim/bundle/vim-prettier/ftdetect)
fchdir() to previous dir
line 2105: sourcing "/Users/marco/.vim/bundle/vim-prettier/ftdetect/css.vim"
line 1: autocmd BufNewFile,BufReadPost *.css setfiletype css
finished sourcing /Users/marco/.vim/bundle/vim-prettier/ftdetect/css.vim
continuing in /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
chdir(/Users/marco/.vim/bundle/vim-prettier/ftdetect)
fchdir() to previous dir
line 2105: sourcing "/Users/marco/.vim/bundle/vim-prettier/ftdetect/graphql.vim"
line 1: autocmd BufNewFile,BufReadPost *.graphql,*.gql setfiletype graphql
finished sourcing /Users/marco/.vim/bundle/vim-prettier/ftdetect/graphql.vim
continuing in /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
chdir(/Users/marco/.vim/bundle/vim-prettier/ftdetect)
fchdir() to previous dir
line 2105: sourcing "/Users/marco/.vim/bundle/vim-prettier/ftdetect/javascript.vim"
line 1: autocmd BufNewFile,BufReadPost *.js setfiletype javascript
finished sourcing /Users/marco/.vim/bundle/vim-prettier/ftdetect/javascript.vim
continuing in /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
chdir(/Users/marco/.vim/bundle/vim-prettier/ftdetect)
fchdir() to previous dir
line 2105: sourcing "/Users/marco/.vim/bundle/vim-prettier/ftdetect/json.vim"
line 1: autocmd BufNewFile,BufReadPost *.json setfiletype json
finished sourcing /Users/marco/.vim/bundle/vim-prettier/ftdetect/json.vim
continuing in /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
chdir(/Users/marco/.vim/bundle/vim-prettier/ftdetect)
fchdir() to previous dir
line 2105: sourcing "/Users/marco/.vim/bundle/vim-prettier/ftdetect/less.vim"
line 1: autocmd BufNewFile,BufReadPost *.less setfiletype less
finished sourcing /Users/marco/.vim/bundle/vim-prettier/ftdetect/less.vim
continuing in /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
chdir(/Users/marco/.vim/bundle/vim-prettier/ftdetect)
fchdir() to previous dir
line 2105: sourcing "/Users/marco/.vim/bundle/vim-prettier/ftdetect/markdown.vim"
line 1: autocmd BufNewFile,BufReadPost *.markdown,*.md,*.mdown,*.mkd,*.mkdn setfiletype markdown
finished sourcing /Users/marco/.vim/bundle/vim-prettier/ftdetect/markdown.vim
continuing in /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
chdir(/Users/marco/.vim/bundle/vim-prettier/ftdetect)
fchdir() to previous dir
line 2105: sourcing "/Users/marco/.vim/bundle/vim-prettier/ftdetect/scss.vim"
line 1: autocmd BufNewFile,BufReadPost *.scss setfiletype scss
finished sourcing /Users/marco/.vim/bundle/vim-prettier/ftdetect/scss.vim
continuing in /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
chdir(/Users/marco/.vim/bundle/vim-prettier/ftdetect)
fchdir() to previous dir
line 2105: sourcing "/Users/marco/.vim/bundle/vim-prettier/ftdetect/typescript.vim"
line 1: autocmd BufNewFile,BufReadPost *.ts setfiletype typescript
finished sourcing /Users/marco/.vim/bundle/vim-prettier/ftdetect/typescript.vim
continuing in /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
chdir(/Users/marco/.vim/bundle/vim-prettier/ftdetect)
fchdir() to previous dir
line 2105: sourcing "/Users/marco/.vim/bundle/vim-prettier/ftdetect/vue.vim"
line 1: autocmd BufNewFile,BufReadPost *.vue setfiletype vue
finished sourcing /Users/marco/.vim/bundle/vim-prettier/ftdetect/vue.vim
continuing in /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/ftdetect/*.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/ftdetect/*.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after/ftdetect/*.vim"
Searching for "/Users/marco/.vim/after/ftdetect/*.vim"
Searching for "/Users/marco/.vim/bundle/Vundle.vim/ftdetect/*.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/after/ftdetect/*.vim"
line 2106: 
line 2107: " NOTE: The above command could have ended the filetypedetect autocmd group
line 2108: " and started another one. Let's make sure it has ended to get to a consistent
line 2109: " state.
line 2110: augroup END
line 2111: 
line 2112: " Generic configuration file. Use FALLBACK, it's just guessing!
line 2118: au filetypedetect BufNewFile,BufRead,StdinReadPost * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif
line 2119: 
line 2120: 
line 2121: " If the GUI is already running, may still need to install the Syntax menu.
line 2122: " Don't do it when the 'M' flag is included in 'guioptions'.
line 2124: if has("menu") && has("gui_running") && !exists("did_install_syntax_menu") && &guioptions !~# "M"
line 2125:   source <sfile>:p:h/menu.vim
line 2126: endif
line 2127: 
line 2128: " Function called for testing all functions defined here.  These are
line 2129: " script-local, thus need to be executed here.
line 2130: " Returns a string with error messages (hopefully empty).
line 2131: func! TestFiletypeFuncs(testlist)
line 2142: 
line 2143: " Restore 'cpoptions'
line 2144: let &cpo = s:cpo_save
line 2145: unlet s:cpo_save
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
continuing in /Users/marco/repos/vim-prettier-bug/vimrc
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after/filetype.vim"
Searching for "/Users/marco/.vim/after/filetype.vim"
Searching for "/Users/marco/.vim/bundle/Vundle.vim/filetype.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/after/filetype.vim"
Searching for "ftplugin.vim" in "/Users/marco/.vim,/Users/marco/.vim/bundle/vim-prettier,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/marco/.vim/after,/Users/marco/.vim/bundle/Vundle.vim,/Users/marco/.vim/bundle/vim-prettier/after"
Searching for "/Users/marco/.vim/ftplugin.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/ftplugin.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/ftplugin.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim"
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 17: sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim"
line 1: " Vim support file to switch on loading plugins for file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last change:^I2006 Apr 30
line 5: 
line 6: if exists("did_load_ftplugin")
line 7:   finish
line 8: endif
line 9: let did_load_ftplugin = 1
line 10: 
line 11: augroup filetypeplugin
line 12:   au FileType * call s:LoadFTPlugin()
line 13: 
line 14:   func! s:LoadFTPlugin()
line 35: augroup END
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim
continuing in /Users/marco/repos/vim-prettier-bug/vimrc
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after/ftplugin.vim"
Searching for "/Users/marco/.vim/after/ftplugin.vim"
Searching for "/Users/marco/.vim/bundle/Vundle.vim/ftplugin.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/after/ftplugin.vim"
Searching for "indent.vim" in "/Users/marco/.vim,/Users/marco/.vim/bundle/vim-prettier,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/marco/.vim/after,/Users/marco/.vim/bundle/Vundle.vim,/Users/marco/.vim/bundle/vim-prettier/after"
Searching for "/Users/marco/.vim/indent.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/indent.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/indent.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/indent.vim"
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 17: sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/indent.vim"
line 1: " Vim support file to switch on loading indent files for file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2008 Feb 22
line 5: 
line 6: if exists("did_indent_on")
line 7:   finish
line 8: endif
line 9: let did_indent_on = 1
line 10: 
line 11: augroup filetypeindent
line 12:   au FileType * call s:LoadIndent()
line 13:   func! s:LoadIndent()
line 31: augroup END
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/indent.vim
continuing in /Users/marco/repos/vim-prettier-bug/vimrc
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after/indent.vim"
Searching for "/Users/marco/.vim/after/indent.vim"
Searching for "/Users/marco/.vim/bundle/Vundle.vim/indent.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/after/indent.vim"
line 18: syntax on
line 18: so $VIMRUNTIME/syntax/syntax.vim
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/syntax)
fchdir() to previous dir
line 18: sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/syntax/syntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 04
line 4: 
line 5: " This file is used for ":syntax on".
line 6: " It installs the autocommands and starts highlighting for all buffers.
line 7: 
line 8: if !has("syntax")
line 9:   finish
line 10: endif
line 11: 
line 12: " If Syntax highlighting appears to be on already, turn it off first, so that
line 13: " any leftovers are cleared.
line 14: if exists("syntax_on") || exists("syntax_manual")
line 15:   so <sfile>:p:h/nosyntax.vim
line 16: endif
line 17: 
line 18: " Load the Syntax autocommands and set the default methods for highlighting.
line 19: runtime syntax/synload.vim
Searching for "syntax/synload.vim" in "/Users/marco/.vim,/Users/marco/.vim/bundle/vim-prettier,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/marco/.vim/after,/Users/marco/.vim/bundle/Vundle.vim,/Users/marco/.vim/bundle/vim-prettier/after"
Searching for "/Users/marco/.vim/syntax/synload.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/syntax/synload.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/syntax/synload.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim"
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/syntax)
fchdir() to previous dir
line 19: sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2016 Nov 04
line 4: 
line 5: " This file sets up for syntax highlighting.
line 6: " It is loaded from "syntax.vim" and "manual.vim".
line 7: " 1. Set the default highlight groups.
line 8: " 2. Install Syntax autocommands for all the available syntax files.
line 9: 
line 10: if !has("syntax")
line 11:   finish
line 12: endif
line 13: 
line 14: " let others know that syntax has been switched on
line 15: let syntax_on = 1
line 16: 
line 17: " Set the default highlighting colors.  Use a color scheme if specified.
line 18: if exists("colors_name")
line 19:   exe "colors " . colors_name
line 20: else
line 21:   runtime! syntax/syncolor.vim
Searching for "syntax/syncolor.vim" in "/Users/marco/.vim,/Users/marco/.vim/bundle/vim-prettier,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/marco/.vim/after,/Users/marco/.vim/bundle/Vundle.vim,/Users/marco/.vim/bundle/vim-prettier/after"
Searching for "/Users/marco/.vim/syntax/syncolor.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/syntax/syncolor.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/syntax/syncolor.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/syntax/syncolor.vim"
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/syntax)
fchdir() to previous dir
line 21: sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 12
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 44: hi Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 45: hi Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 46: hi Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=SlateBlue guibg=NONE
line 47:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 47: hi Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 48:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 48: hi Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 49:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 49: hi PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=Purple guibg=NONE
line 50:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 50: hi Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 51:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 51: hi Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 52:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 52: hi Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 53: endif
line 54: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 54: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 55: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 55: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 56: 
line 57: " Common groups that link to default highlighting.
line 58: " You can specify other highlighting easily.
line 59: SynLink String^I^IConstant
line 59: hi link String^I^IConstant
line 60: SynLink Character^IConstant
line 60: hi link Character^IConstant
line 61: SynLink Number^I^IConstant
line 61: hi link Number^I^IConstant
line 62: SynLink Boolean^I^IConstant
line 62: hi link Boolean^I^IConstant
line 63: SynLink Float^I^INumber
line 63: hi link Float^I^INumber
line 64: SynLink Function^IIdentifier
line 64: hi link Function^IIdentifier
line 65: SynLink Conditional^IStatement
line 65: hi link Conditional^IStatement
line 66: SynLink Repeat^I^IStatement
line 66: hi link Repeat^I^IStatement
line 67: SynLink Label^I^IStatement
line 67: hi link Label^I^IStatement
line 68: SynLink Operator^IStatement
line 68: hi link Operator^IStatement
line 69: SynLink Keyword^I^IStatement
line 69: hi link Keyword^I^IStatement
line 70: SynLink Exception^IStatement
line 70: hi link Exception^IStatement
line 71: SynLink Include^I^IPreProc
line 71: hi link Include^I^IPreProc
line 72: SynLink Define^I^IPreProc
line 72: hi link Define^I^IPreProc
line 73: SynLink Macro^I^IPreProc
line 73: hi link Macro^I^IPreProc
line 74: SynLink PreCondit^IPreProc
line 74: hi link PreCondit^IPreProc
line 75: SynLink StorageClass^IType
line 75: hi link StorageClass^IType
line 76: SynLink Structure^IType
line 76: hi link Structure^IType
line 77: SynLink Typedef^I^IType
line 77: hi link Typedef^I^IType
line 78: SynLink Tag^I^ISpecial
line 78: hi link Tag^I^ISpecial
line 79: SynLink SpecialChar^ISpecial
line 79: hi link SpecialChar^ISpecial
line 80: SynLink Delimiter^ISpecial
line 80: hi link Delimiter^ISpecial
line 81: SynLink SpecialComment^ISpecial
line 81: hi link SpecialComment^ISpecial
line 82: SynLink Debug^I^ISpecial
line 82: hi link Debug^I^ISpecial
line 83: 
line 84: delcommand SynColor
line 85: delcommand SynLink
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/syntax/syncolor.vim
continuing in /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/Users/marco/.vim/after/syntax/syncolor.vim"
Searching for "/Users/marco/.vim/bundle/Vundle.vim/syntax/syncolor.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/after/syntax/syncolor.vim"
line 22: endif
line 23: 
line 24: " Line continuation is used here, remove 'C' from 'cpoptions'
line 25: let s:cpo_save = &cpo
line 26: set cpo&vim
line 27: 
line 28: " First remove all old syntax autocommands.
line 29: au! Syntax
line 30: 
line 31: au Syntax *^I^Icall s:SynSet()
line 32: 
line 33: fun! s:SynSet()
line 61: 
line 62: 
line 63: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)
line 68: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif
line 69: 
line 70: 
line 71: " Source the user-specified syntax highlighting file
line 72: if exists("mysyntaxfile")
line 73:   let s:fname = expand(mysyntaxfile)
line 74:   if filereadable(s:fname)
line 75:     execute "source " . fnameescape(s:fname)
line 76:   endif
line 77: endif
line 78: 
line 79: " Restore 'cpoptions'
line 80: let &cpo = s:cpo_save
line 81: unlet s:cpo_save
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim
continuing in /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/syntax/syntax.vim
line 20: 
line 21: " Load the FileType autocommands if not done yet.
line 22: if exists("did_load_filetypes")
line 23:   let s:did_ft = 1
line 24: else
line 25:   filetype on
line 26:   let s:did_ft = 0
line 27: endif
line 28: 
line 29: " Set up the connection between FileType and Syntax autocommands.
line 30: " This makes the syntax automatically set when the file type is detected.
line 31: augroup syntaxset
line 32:   au! FileType *^Iexe "set syntax=" . expand("<amatch>")
line 33: augroup END
line 34: 
line 35: 
line 36: " Execute the syntax autocommands for the each buffer.
line 37: " If the filetype wasn't detected yet, do that now.
line 38: " Always do the syntaxset autocommands, for buffers where the 'filetype'
line 39: " already was set manually (e.g., help buffers).
line 40: doautoall syntaxset FileType
line 41: if !s:did_ft
line 42:   doautoall filetypedetect BufRead
line 43: endif
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/syntax/syntax.vim
continuing in /Users/marco/repos/vim-prettier-bug/vimrc
line 19: set number
line 20: 
line 21: " prettier configuration with vim-prettier
line 22: " let g:prettier#autoformat = 0
line 23: autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql PrettierAsync
finished sourcing vimrc
Searching for "pack/*/start/*" in "/Users/marco/.vim,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/marco/.vim/after"
Searching for "/Users/marco/.vim/pack/*/start/*"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/start/*"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/pack/*/start/*"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/start/*"
Searching for "/Users/marco/.vim/after/pack/*/start/*"
not found in 'packpath': "pack/*/start/*"
Searching for "plugin/**/*.vim" in "/Users/marco/.vim,/Users/marco/.vim/bundle/vim-prettier,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/marco/.vim/after,/Users/marco/.vim/bundle/Vundle.vim,/Users/marco/.vim/bundle/vim-prettier/after"
Searching for "/Users/marco/.vim/plugin/**/*.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/plugin/**/*.vim"
chdir(/Users/marco/.vim/bundle/vim-prettier/plugin)
fchdir() to previous dir
sourcing "/Users/marco/.vim/bundle/vim-prettier/plugin/prettier.vim"
line 1: " vim-prettier: A vim plugin wrapper for prettier, pre-configured with custom default prettier settings.
line 2: "
line 3: " Script Info  {{{
line 4: "==========================================================================================================
line 5: " Name Of File: prettier.vim
line 6: "  Description: A vim plugin wrapper for prettier, pre-configured with custom default prettier settings.
line 7: "   Maintainer: Mitermayer Reis <mitermayer.reis at gmail.com>
line 8: "      Version: 0.2.6
line 9: "        Usage: Use :help vim-prettier-usage, or visit https://github.com/prettier/vim-prettier
line 10: "
line 11: "==========================================================================================================
line 12: " }}}
line 13: 
line 14: if exists('g:loaded_prettier')
line 15:   finish
line 16: endif
line 17: let g:loaded_prettier = 1
line 18: 
line 19: " => Plugin config
line 20: " autoformating enabled by default upon saving
line 21: let g:prettier#autoformat = get(g:, 'prettier#autoformat', 1)
line 22: 
line 23: " experimental async flag will be disabled by default until is stable
line 24: let g:prettier#nvim_unstable_async = get(g:,'prettier#nvim_unstable_async', 0)
line 25: 
line 26: " path to prettier cli
line 27: let g:prettier#exec_cmd_path = get(g:, 'prettier#exec_cmd_path', 0)
line 28: 
line 29: " calling :Prettier by default runs synchronous
line 30: let g:prettier#exec_cmd_async = get(g:, 'prettier#exec_cmd_async', 0)
line 31: 
line 32: " when having formatting errors will open the quickfix by default
line 33: let g:prettier#quickfix_enabled = get(g:, 'prettier#quickfix_enabled', 1)
line 34: 
line 35: " => Prettier CLI config
line 36: " max line lengh that prettier will wrap on
line 37: let g:prettier#config#print_width = get(g:, 'prettier#config#print_width', 80)
line 38: 
line 39: " number of spaces per indentation level
line 40: let g:prettier#config#tab_width = get(g:,'prettier#config#tab_width', 2)
line 41: 
line 42: " use tabs over spaces
line 43: let g:prettier#config#use_tabs = get(g:,'prettier#config#use_tabs', 'false')
line 44: 
line 45: " print semicolons
line 46: let g:prettier#config#semi = get(g:,'prettier#config#semi', 'true')
line 47: 
line 48: " single quotes over double quotes
line 49: let g:prettier#config#single_quote = get(g:,'prettier#config#single_quote', 'true')
line 50: 
line 51: " print spaces between brackets
line 52: let g:prettier#config#bracket_spacing = get(g:,'prettier#config#bracket_spacing', 'false')
line 53: 
line 54: " put > on the last line instead of new line
line 55: let g:prettier#config#jsx_bracket_same_line = get(g:,'prettier#config#jsx_bracket_same_line', 'true')
line 56: 
line 57: " avoid wrapping a single arrow function param in parens
line 58: let g:prettier#config#arrow_parens = get(g:,'prettier#config#arrow_parens', 'avoid')
line 59: 
line 60: " none|es5|all
line 61: let g:prettier#config#trailing_comma = get(g:,'prettier#config#trailing_comma', 'all')
line 62: 
line 63: " flow|babylon|typescript|postcss|json|graphql
line 64: let g:prettier#config#parser = get(g:,'prettier#config#parser', 'flow')
line 65: 
line 66: " cli-override|file-override|prefer-file
line 67: let g:prettier#config#config_precedence = get(g:, 'prettier#config#config_precedence', 'prefer-file')
line 68: 
line 69: " always|never|preserve
line 70: let g:prettier#config#prose_wrap = get(g:, 'prettier#config#prose_wrap', 'preserve')
line 71: 
line 72: " Don't leave the quicklist focused on error.
line 73: let g:prettier#quickfix_auto_focus = get(g:, 'prettier#quickfix_auto_focus', 1)
line 74: 
line 75: " synchronous by default
line 76: command! -nargs=? -range=% Prettier call prettier#Prettier(g:prettier#exec_cmd_async, <line1>, <line2>)
line 77: 
line 78: " prettier async
line 79: command! -nargs=? -range=% PrettierAsync call prettier#Prettier(1, <line1>, <line2>)
line 80: 
line 81: " prints vim-prettier version
line 82: command! -nargs=? -range=% PrettierVersion echom '0.2.6'
line 83: 
line 84: " call prettier cli
line 85: command! -nargs=? -range=% PrettierCli call prettier#PrettierCli(<q-args>)
line 86: 
line 87: " call prettier cli to get its version
line 88: command! -nargs=? -range=% PrettierCliVersion call prettier#PrettierCli('--version')
line 89: 
line 90: " prints prettier resolved cli path
line 91: command! -nargs=? -range=% PrettierCliPath call prettier#PrettierCliPath()
line 92: 
line 93: " map command
line 94: if !hasmapto('<Plug>(Prettier)') && maparg('<Leader>p', 'n') ==# ''
line 95:   nmap <unique> <Leader>p <Plug>(Prettier)
line 96: endif
line 97: nnoremap <silent> <Plug>(Prettier) :Prettier<CR>
line 98: nnoremap <silent> <Plug>(PrettierAsync) :PrettierAsync<CR>
line 99: nnoremap <silent> <Plug>(PrettierVersion) :PrettierVersion<CR>
line 100: nnoremap <silent> <Plug>(PrettierCli) :PrettierCli<CR>
line 101: nnoremap <silent> <Plug>(PrettierCliVersion) :PrettierCliVersion<CR>
line 102: nnoremap <silent> <Plug>(PrettierCliPath) :PrettierCliPath<CR>
finished sourcing /Users/marco/.vim/bundle/vim-prettier/plugin/prettier.vim
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/plugin/**/*.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/**/*.vim"
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/getscriptPlugin.vim"
line 1: " ---------------------------------------------------------------------
line 2: " getscriptPlugin.vim
line 3: "  Author:^ICharles E. Campbell
line 4: "  Date:^INov 29, 2013
line 5: "  Installing:^I:help glvs-install
line 6: "  Usage:^I:help glvs
line 7: "
line 8: " GetLatestVimScripts: 642 1 :AutoInstall: getscript.vim
line 9: "
line 10: " (Rom 15:11 WEB) Again, "Praise the Lord, all you Gentiles!  Let
line 11: " all the peoples praise Him."
line 12: " ---------------------------------------------------------------------
line 13: " Initialization:^I{{{1
line 14: " if you're sourcing this file, surely you can't be
line 15: " expecting vim to be in its vi-compatible mode
line 16: if exists("g:loaded_getscriptPlugin")
line 17:  finish
line 18: endif
line 19: if &cp
line 20:  if &verbose
line 21:   echo "GetLatestVimScripts is not vi-compatible; not loaded (you need to set nocp)"
line 22:  endif
line 23:  finish
line 24: endif
line 25: let g:loaded_getscriptPlugin = "v36"
line 26: let s:keepcpo                = &cpo
line 27: set cpo&vim
line 28: 
line 29: " ---------------------------------------------------------------------
line 30: "  Public Interface: {{{1
line 31: com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()
line 32: com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()
line 33: silent! com -nargs=0 GLVS                call getscript#GetLatestVimScripts()
line 34: 
line 35: " ---------------------------------------------------------------------
line 36: " Restore Options: {{{1
line 37: let &cpo= s:keepcpo
line 38: unlet s:keepcpo
line 39: 
line 40: " ---------------------------------------------------------------------
line 41: " vim: ts=8 sts=2 fdm=marker nowrap
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/getscriptPlugin.vim
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/gzip.vim"
line 1: " Vim plugin for editing compressed files.
line 2: " Maintainer: Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2016 Oct 30
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded
line 7: " - when 'compatible' is set
line 8: " - some autocommands are already taking care of compressed files
line 9: if exists("loaded_gzip") || &cp || exists("#BufReadPre#*.gz")
line 10:   finish
line 11: endif
line 12: let loaded_gzip = 1
line 13: 
line 14: augroup gzip
line 15:   " Remove all gzip autocommands
line 16:   au!
line 17: 
line 18:   " Enable editing of gzipped files.
line 19:   " The functions are defined in autoload/gzip.vim.
line 20:   "
line 21:   " Set binary mode before reading the file.
line 22:   " Use "gzip -d", gunzip isn't always available.
line 23:   autocmd BufReadPre,FileReadPre^I*.gz,*.bz2,*.Z,*.lzma,*.xz,*.lz,*.zst setlocal bin
line 24:   autocmd BufReadPost,FileReadPost^I*.gz  call gzip#read("gzip -dn")
line 25:   autocmd BufReadPost,FileReadPost^I*.bz2 call gzip#read("bzip2 -d")
line 26:   autocmd BufReadPost,FileReadPost^I*.Z   call gzip#read("uncompress")
line 27:   autocmd BufReadPost,FileReadPost^I*.lzma call gzip#read("lzma -d")
line 28:   autocmd BufReadPost,FileReadPost^I*.xz  call gzip#read("xz -d")
line 29:   autocmd BufReadPost,FileReadPost^I*.lz  call gzip#read("lzip -d")
line 30:   autocmd BufReadPost,FileReadPost^I*.zst call gzip#read("zstd -d --rm")
line 31:   autocmd BufWritePost,FileWritePost^I*.gz  call gzip#write("gzip")
line 32:   autocmd BufWritePost,FileWritePost^I*.bz2 call gzip#write("bzip2")
line 33:   autocmd BufWritePost,FileWritePost^I*.Z   call gzip#write("compress -f")
line 34:   autocmd BufWritePost,FileWritePost^I*.lzma call gzip#write("lzma -z")
line 35:   autocmd BufWritePost,FileWritePost^I*.xz  call gzip#write("xz -z")
line 36:   autocmd BufWritePost,FileWritePost^I*.lz  call gzip#write("lzip")
line 37:   autocmd BufWritePost,FileWritePost^I*.zst  call gzip#write("zstd --rm")
line 38:   autocmd FileAppendPre^I^I^I*.gz  call gzip#appre("gzip -dn")
line 39:   autocmd FileAppendPre^I^I^I*.bz2 call gzip#appre("bzip2 -d")
line 40:   autocmd FileAppendPre^I^I^I*.Z   call gzip#appre("uncompress")
line 41:   autocmd FileAppendPre^I^I^I*.lzma call gzip#appre("lzma -d")
line 42:   autocmd FileAppendPre^I^I^I*.xz   call gzip#appre("xz -d")
line 43:   autocmd FileAppendPre^I^I^I*.lz   call gzip#appre("lzip -d")
line 44:   autocmd FileAppendPre^I^I^I*.zst call gzip#appre("zstd -d --rm")
line 45:   autocmd FileAppendPost^I^I*.gz  call gzip#write("gzip")
line 46:   autocmd FileAppendPost^I^I*.bz2 call gzip#write("bzip2")
line 47:   autocmd FileAppendPost^I^I*.Z   call gzip#write("compress -f")
line 48:   autocmd FileAppendPost^I^I*.lzma call gzip#write("lzma -z")
line 49:   autocmd FileAppendPost^I^I*.xz call gzip#write("xz -z")
line 50:   autocmd FileAppendPost^I^I*.lz call gzip#write("lzip")
line 51:   autocmd FileAppendPost^I^I*.zst call gzip#write("zstd --rm")
line 52: augroup END
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/gzip.vim
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/logiPat.vim"
line 1: " LogiPat: Boolean logical pattern matcher
line 2: "   Author:  Charles E. Campbell
line 3: "   Date:    Apr 04, 2016
line 4: "   Version: 4
line 5: "   Purpose: to do Boolean-logic based regular expression pattern matching
line 6: " Copyright:    Copyright (C) 1999-2011 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like most anything else that's free,
line 10: "               LogiPat.vim is provided *as is* and comes with no warranty
line 11: "               of any kind, either expressed or implied. By using this
line 12: "               plugin, you agree that in no event will the copyright
line 13: "               holder be liable for any damages resulting from the use
line 14: "               of this software.
line 15: "
line 16: "   Usage: {{{1
line 17: "       :LogiPat ...
line 18: "
line 19: "         Boolean logic supported:
line 20: "            () grouping operators
line 21: "            !  not the following pattern
line 22: "            |  logical or
line 23: "            &  logical and
line 24: "            "..pattern.."
line 25: "^IExample: {{{1
line 26: "^I^I:LogiPat !("january"|"february")
line 27: "^I^I  would match all strings not containing the strings january
line 28: "^I^I  or february
line 29: "^IGetLatestVimScripts: 1290 1 :AutoInstall: LogiPat.vim
line 30: "
line 31: "  Behold, you will conceive in your womb, and bring forth a son, {{{1
line 32: "  and will call his name Jesus. He will be great, and will be
line 33: "  called the Son of the Most High. The Lord God will give him the
line 34: "  throne of his father, David, and he will reign over the house of
line 35: "  Jacob forever. There will be no end to his kingdom. (Luke 1:31-33 WEB)
line 36: 
line 37: " ---------------------------------------------------------------------
line 38: " Load Once: {{{1
line 39: if &cp || exists("loaded_logiPat")
line 40:  finish
line 41: endif
line 42: let g:loaded_logiPat = "v4"
line 43: let s:keepcpo        = &cpo
line 44: set cpo&vim
line 45: "DechoRemOn
line 46: 
line 47: " ---------------------------------------------------------------------
line 48: " Public Interface: {{{1
line 49: com!     -nargs=* LogiPat^I^Icall   LogiPat(<q-args>,1)
line 50: sil! com -nargs=* LP^I^I^Icall   LogiPat(<q-args>,1)
line 51: sil! com -nargs=* LPR^I^I^Icall   LogiPat(<q-args>,1,"r")
line 52: com!     -nargs=+ LPE^I^I^Iechomsg LogiPat(<q-args>)
line 53: com!     -nargs=+ LogiPatFlags^Ilet  s:LogiPatFlags="<args>"
line 54: sil! com -nargs=+ LPF^I^I^Ilet  s:LogiPatFlags="<args>"
line 55: 
line 56: " =====================================================================
line 57: " Functions: {{{1
line 58: 
line 59: " ---------------------------------------------------------------------
line 60: " LogiPat: this function interprets the boolean-logic pattern {{{2
line 61: fun! LogiPat(pat,...)
line 146: 
line 147: " ---------------------------------------------------------------------
line 148: " s:String: Vim6.4 doesn't have string() {{{2
line 149: func! s:String(str)
line 152: 
line 153: " ---------------------------------------------------------------------
line 154: " LP_PatPush: {{{2
line 155: fun! s:LP_PatPush(pat)
line 162: 
line 163: " ---------------------------------------------------------------------
line 164: " LP_PatPop: pop a number/variable from LogiPat's pattern stack {{{2
line 165: fun! s:LP_PatPop(lookup)
line 178: 
line 179: " ---------------------------------------------------------------------
line 180: " LP_OpPush: {{{2
line 181: fun! s:LP_OpPush(op)
line 232: 
line 233: " ---------------------------------------------------------------------
line 234: " LP_Execute: execute operators from opstack using pattern stack {{{2
line 235: fun! s:LP_Execute(preclvl)
line 265: 
line 266: " ---------------------------------------------------------------------
line 267: " LP_Not: writes a logical-not for a pattern {{{2
line 268: fun! s:LP_Not(pat)
line 279: 
line 280: " ---------------------------------------------------------------------
line 281: " LP_Or: writes a logical-or branch using two patterns {{{2
line 282: fun! s:LP_Or(pat1,pat2)
line 288: 
line 289: " ---------------------------------------------------------------------
line 290: " LP_And: writes a logical-and concat using two patterns {{{2
line 291: fun! s:LP_And(pat1,pat2)
line 297: 
line 298: " ---------------------------------------------------------------------
line 299: " StackLook: {{{2
line 300: fun! s:StackLook(description)
line 334: 
line 335: " ---------------------------------------------------------------------
line 336: "  Cleanup And Modeline: {{{1
line 337: let &cpo= s:keepcpo
line 338: unlet s:keepcpo
line 339: " vim: ts=4 fdm=marker
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/logiPat.vim
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/manpager.vim"
line 1: " Vim plugin for using Vim as manpager.
line 2: " Maintainer: Enno Nagel <ennonagel+vim@gmail.com>
line 3: " Last Change: 2018 Feb 04
line 4: 
line 5: command! -nargs=0 MANPAGER call s:ManPager() | delcommand MANPAGER
line 6: 
line 7: function! s:ManPager()
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/manpager.vim
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/matchparen.vim"
line 1: " Vim plugin for showing matching parens
line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2017 Sep 30
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded (or disabled)
line 7: " - when 'compatible' is set
line 8: " - the "CursorMoved" autocmd event is not available.
line 9: if exists("g:loaded_matchparen") || &cp || !exists("##CursorMoved")
line 10:   finish
line 11: endif
line 12: let g:loaded_matchparen = 1
line 13: 
line 14: if !exists("g:matchparen_timeout")
line 15:   let g:matchparen_timeout = 300
line 16: endif
line 17: if !exists("g:matchparen_insert_timeout")
line 18:   let g:matchparen_insert_timeout = 60
line 19: endif
line 20: 
line 21: augroup matchparen
line 22:   " Replace all matchparen autocommands
line 23:   autocmd! CursorMoved,CursorMovedI,WinEnter * call s:Highlight_Matching_Pair()
line 24:   if exists('##TextChanged')
line 25:     autocmd! TextChanged,TextChangedI * call s:Highlight_Matching_Pair()
line 26:   endif
line 27: augroup END
line 28: 
line 29: " Skip the rest if it was already done.
line 30: if exists("*s:Highlight_Matching_Pair")
line 31:   finish
line 32: endif
line 33: 
line 34: let s:cpo_save = &cpo
line 35: set cpo-=C
line 36: 
line 37: " The function that is invoked (very often) to define a ":match" highlighting
line 38: " for any matching paren.
line 39: function! s:Highlight_Matching_Pair()
line 187: 
line 188: " Define commands that will disable and enable the plugin.
line 189: command! DoMatchParen call s:DoMatchParen()
line 190: command! NoMatchParen call s:NoMatchParen()
line 191: 
line 192: func! s:NoMatchParen()
line 199: 
line 200: func! s:DoMatchParen()
line 206: 
line 207: let &cpo = s:cpo_save
line 208: unlet s:cpo_save
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/matchparen.vim
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/netrwPlugin.vim"
line 1: " netrwPlugin.vim: Handles file transfer and remote directory listing across a network
line 2: "            PLUGIN SECTION
line 3: " Date:^I^IFeb 08, 2016
line 4: " Maintainer:^ICharles E Campbell <NdrOchip@ScampbellPfamily.AbizM-NOSPAM>
line 5: " GetLatestVimScripts: 1075 1 :AutoInstall: netrw.vim
line 6: " Copyright:    Copyright (C) 1999-2013 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like anything else that's free,
line 10: "               netrw.vim, netrwPlugin.vim, and netrwSettings.vim are provided
line 11: "               *as is* and comes with no warranty of any kind, either
line 12: "               expressed or implied. By using this plugin, you agree that
line 13: "               in no event will the copyright holder be liable for any damages
line 14: "               resulting from the use of this software.
line 15: "
line 16: "  But be doers of the Word, and not only hearers, deluding your own selves {{{1
line 17: "  (James 1:22 RSV)
line 18: " =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
line 19: " Load Once: {{{1
line 20: if &cp || exists("g:loaded_netrwPlugin")
line 21:  finish
line 22: endif
line 23: let g:loaded_netrwPlugin = "v156"
line 24: let s:keepcpo = &cpo
line 25: set cpo&vim
line 26: "DechoRemOn
line 27: 
line 28: " ---------------------------------------------------------------------
line 29: " Public Interface: {{{1
line 30: 
line 31: " Local Browsing Autocmds: {{{2
line 32: augroup FileExplorer
line 33:  au!
line 34:  au BufLeave *  if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
line 35:  au BufEnter *^Isil call s:LocalBrowse(expand("<amatch>"))
line 36:  au VimEnter *^Isil call s:VimEnter(expand("<amatch>"))
line 37:  if has("win32") || has("win95") || has("win64") || has("win16")
line 38:   au BufEnter .* sil call s:LocalBrowse(expand("<amatch>"))
line 39:  endif
line 40: augroup END
line 41: 
line 42: " Network Browsing Reading Writing: {{{2
line 43: augroup Network
line 44:  au!
line 45:  au BufReadCmd   file://*^I^I^I^I^I^I^I^I^I^I^Icall netrw#FileUrlRead(expand("<amatch>"))
line 46:  au BufReadCmd   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau BufReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(2,expand("<amatch>"))|exe "sil doau BufReadPost ".fnameescape(expand("<amatch>"))
line 47:  au FileReadCmd  ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau FileReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(1,expand("<amatch>"))|exe "sil doau FileReadPost ".fnameescape(expand("<amatch>"))
line 48:  au BufWriteCmd  ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau BufWritePre ".fnameescape(expand("<amatch>"))|exe 'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau BufWritePost ".fnameescape(expand("<amatch>"))
line 49:  au FileWriteCmd ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau FileWritePre ".fnameescape(expand("<amatch>"))|exe "'[,']".'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau FileWritePost ".fnameescape(expand("<amatch>"))
line 50:  try                                                       
line 51:   au SourceCmd   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))
line 52:  catch /^Vim\%((\a\+)\)\=:E216/                            
line 53:   au SourcePre   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))
line 54:  endtry
line 55: augroup END
line 56: 
line 57: " Commands: :Nread, :Nwrite, :NetUserPass {{{2
line 58: com! -count=1 -nargs=*^INread^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetRead(<count>,<f-args>)<bar>call winrestview(s:svpos)
line 59: com! -range=% -nargs=*^INwrite^I^Ilet s:svpos= winsaveview()<bar><line1>,<line2>call netrw#NetWrite(<f-args>)<bar>call winrestview(s:svpos)
line 60: com! -nargs=*^I^INetUserPass^Icall NetUserPass(<f-args>)
line 61: com! -nargs=*^I        Nsource^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetSource(<f-args>)<bar>call winrestview(s:svpos)
line 62: com! -nargs=?^I^INtree^I^Icall netrw#SetTreetop(<q-args>)
line 63: 
line 64: " Commands: :Explore, :Sexplore, Hexplore, Vexplore, Lexplore {{{2
line 65: com! -nargs=* -bar -bang -count=0 -complete=dir^IExplore^I^Icall netrw#Explore(<count>,0,0+<bang>0,<q-args>)
line 66: com! -nargs=* -bar -bang -count=0 -complete=dir^ISexplore^Icall netrw#Explore(<count>,1,0+<bang>0,<q-args>)
line 67: com! -nargs=* -bar -bang -count=0 -complete=dir^IHexplore^Icall netrw#Explore(<count>,1,2+<bang>0,<q-args>)
line 68: com! -nargs=* -bar -bang -count=0 -complete=dir^IVexplore^Icall netrw#Explore(<count>,1,4+<bang>0,<q-args>)
line 69: com! -nargs=* -bar       -count=0 -complete=dir^ITexplore^Icall netrw#Explore(<count>,0,6        ,<q-args>)
line 70: com! -nargs=* -bar -bang^I^I^INexplore^Icall netrw#Explore(-1,0,0,<q-args>)
line 71: com! -nargs=* -bar -bang^I^I^IPexplore^Icall netrw#Explore(-2,0,0,<q-args>)
line 72: com! -nargs=* -bar -bang -count=0 -complete=dir Lexplore^Icall netrw#Lexplore(<count>,<bang>0,<q-args>)
line 73: 
line 74: " Commands: NetrwSettings {{{2
line 75: com! -nargs=0^INetrwSettings^Icall netrwSettings#NetrwSettings()
line 76: com! -bang^INetrwClean^Icall netrw#Clean(<bang>0)
line 77: 
line 78: " Maps:
line 79: if !exists("g:netrw_nogx")
line 80:  if maparg('gx','n') == ""
line 81:   if !hasmapto('<Plug>NetrwBrowseX')
line 82:    nmap <unique> gx <Plug>NetrwBrowseX
line 83:   endif
line 84:   nno <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())<cr>
line 85:  endif
line 86:  if maparg('gx','v') == ""
line 87:   if !hasmapto('<Plug>NetrwBrowseXVis')
line 88:    vmap <unique> gx <Plug>NetrwBrowseXVis
line 89:   endif
line 90:   vno <silent> <Plug>NetrwBrowseXVis :<c-u>call netrw#BrowseXVis()<cr>
line 91:  endif
line 92: endif
line 93: if exists("g:netrw_usetab") && g:netrw_usetab
line 94:  if maparg('<c-tab>','n') == ""
line 95:   nmap <unique> <c-tab> <Plug>NetrwShrink
line 96:  endif
line 97:  nno <silent> <Plug>NetrwShrink :call netrw#Shrink()<cr>
line 98: endif
line 99: 
line 100: " ---------------------------------------------------------------------
line 101: " LocalBrowse: invokes netrw#LocalBrowseCheck() on directory buffers {{{2
line 102: fun! s:LocalBrowse(dirname)
line 148: 
line 149: " ---------------------------------------------------------------------
line 150: " s:VimEnter: after all vim startup stuff is done, this function is called. {{{2
line 151: "             Its purpose: to look over all windows and run s:LocalBrowse() on
line 152: "             them, which checks if they're directories and will create a directory
line 153: "             listing when appropriate.
line 154: "             It also sets s:vimentered, letting s:LocalBrowse() know that s:VimEnter()
line 155: "             has already been called.
line 156: fun! s:VimEnter(dirname)
line 164: 
line 165: " ---------------------------------------------------------------------
line 166: " NetrwStatusLine: {{{1
line 167: fun! NetrwStatusLine()
line 178: 
line 179: " ------------------------------------------------------------------------
line 180: " NetUserPass: set username and password for subsequent ftp transfer {{{1
line 181: "   Usage:  :call NetUserPass()^I^I^I-- will prompt for userid and password
line 182: "^I    :call NetUserPass("uid")^I^I-- will prompt for password
line 183: "^I    :call NetUserPass("uid","password") -- sets global userid and password
line 184: fun! NetUserPass(...)
line 208: 
line 209: " ------------------------------------------------------------------------
line 210: " Modelines And Restoration: {{{1
line 211: let &cpo= s:keepcpo
line 212: unlet s:keepcpo
line 213: " vim:ts=8 fdm=marker
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/netrwPlugin.vim
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/rrhelper.vim"
line 1: " Vim plugin with helper function(s) for --remote-wait
line 2: " Maintainer: Flemming Madsen <fma@cci.dk>
line 3: " Last Change: 2008 May 29
line 4: 
line 5: " Has this already been loaded?
line 6: if exists("loaded_rrhelper") || !has("clientserver")
line 7:   finish
line 8: endif
line 9: let loaded_rrhelper = 1
line 10: 
line 11: " Setup answers for a --remote-wait client who will assume
line 12: " a SetupRemoteReplies() function in the command server
line 13: 
line 14: function SetupRemoteReplies()
line 41: 
line 42: function DoRemoteReply(id, cnt, group, file)
line 47: 
line 48: " vim: set sw=2 sts=2 :
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/rrhelper.vim
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/spellfile.vim"
line 1: " Vim plugin for downloading spell files
line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2006 Feb 01
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded
line 7: " - when 'compatible' is set
line 8: " - some autocommands are already taking care of spell files
line 9: if exists("loaded_spellfile_plugin") || &cp || exists("#SpellFileMissing")
line 10:   finish
line 11: endif
line 12: let loaded_spellfile_plugin = 1
line 13: 
line 14: " The function is in the autoload directory.
line 15: autocmd SpellFileMissing * call spellfile#LoadFile(expand('<amatch>'))
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/spellfile.vim
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/tarPlugin.vim"
line 1: " tarPlugin.vim -- a Vim plugin for browsing tarfiles
line 2: " Original was copyright (c) 2002, Michael C. Toren <mct@toren.net>
line 3: " Modified by Charles E. Campbell
line 4: " Distributed under the GNU General Public License.
line 5: "
line 6: " Updates are available from <http://michael.toren.net/code/>.  If you
line 7: " find this script useful, or have suggestions for improvements, please
line 8: " let me know.
line 9: " Also look there for further comments and documentation.
line 10: "
line 11: " This part only sets the autocommands.  The functions are in autoload/tar.vim.
line 12: " ---------------------------------------------------------------------
line 13: "  Load Once: {{{1
line 14: if &cp || exists("g:loaded_tarPlugin")
line 15:  finish
line 16: endif
line 17: let g:loaded_tarPlugin = "v29"
line 18: let s:keepcpo          = &cpo
line 19: set cpo&vim
line 20: 
line 21: " ---------------------------------------------------------------------
line 22: "  Public Interface: {{{1
line 23: augroup tar
line 24:   au!
line 25:   au BufReadCmd   tarfile::*^Icall tar#Read(expand("<amatch>"), 1)
line 26:   au FileReadCmd  tarfile::*^Icall tar#Read(expand("<amatch>"), 0)
line 27:   au BufWriteCmd  tarfile::*^Icall tar#Write(expand("<amatch>"))
line 28:   au FileWriteCmd tarfile::*^Icall tar#Write(expand("<amatch>"))
line 29: 
line 30:   if has("unix")
line 31:    au BufReadCmd   tarfile::*/*^Icall tar#Read(expand("<amatch>"), 1)
line 32:    au FileReadCmd  tarfile::*/*^Icall tar#Read(expand("<amatch>"), 0)
line 33:    au BufWriteCmd  tarfile::*/*^Icall tar#Write(expand("<amatch>"))
line 34:    au FileWriteCmd tarfile::*/*^Icall tar#Write(expand("<amatch>"))
line 35:   endif
line 36: 
line 37:   au BufReadCmd   *.tar.gz^I^Icall tar#Browse(expand("<amatch>"))
line 38:   au BufReadCmd   *.tar^I^I^Icall tar#Browse(expand("<amatch>"))
line 39:   au BufReadCmd   *.lrp^I^I^Icall tar#Browse(expand("<amatch>"))
line 40:   au BufReadCmd   *.tar.bz2^I^Icall tar#Browse(expand("<amatch>"))
line 41:   au BufReadCmd   *.tar.Z^I^Icall tar#Browse(expand("<amatch>"))
line 42:   au BufReadCmd   *.tgz^I^I^Icall tar#Browse(expand("<amatch>"))
line 43:   au BufReadCmd   *.tbz^I^I^Icall tar#Browse(expand("<amatch>"))
line 44:   au BufReadCmd   *.tar.lzma^Icall tar#Browse(expand("<amatch>"))
line 45:   au BufReadCmd   *.tar.xz^I^Icall tar#Browse(expand("<amatch>"))
line 46:   au BufReadCmd   *.txz^I^I^Icall tar#Browse(expand("<amatch>"))
line 47: augroup END
line 48: com! -nargs=? -complete=file Vimuntar call tar#Vimuntar(<q-args>)
line 49: 
line 50: " ---------------------------------------------------------------------
line 51: " Restoration And Modelines: {{{1
line 52: " vim: fdm=marker
line 53: let &cpo= s:keepcpo
line 54: unlet s:keepcpo
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/tarPlugin.vim
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/tohtml.vim"
line 1: " Vim plugin for converting a syntax highlighted file to HTML.
line 2: " Maintainer: Ben Fritz <fritzophrenic@gmail.com>
line 3: " Last Change: 2015 Sep 08
line 4: "
line 5: " The core of the code is in $VIMRUNTIME/autoload/tohtml.vim and
line 6: " $VIMRUNTIME/syntax/2html.vim
line 7: "
line 8: " TODO: {{{
line 9: "   * Options for generating the CSS in external style sheets. New :TOcss
line 10: "     command to convert the current color scheme into a (mostly) generic CSS
line 11: "     stylesheet which can be re-used. Alternate stylesheet support? Good start
line 12: "     by Erik Falor
line 13: "     ( https://groups.google.com/d/topic/vim_use/7XTmC4D22dU/discussion ).
line 14: "   * Add optional argument to :TOhtml command to specify mode (gui, cterm,
line 15: "     term) to use for the styling. Suggestion by "nacitar".
line 16: "   * Add way to override or specify which RGB colors map to the color numbers
line 17: "     in cterm. Get better defaults than just guessing? Suggestion by "nacitar".
line 18: "   * Disable filetype detection until after all processing is done.
line 19: "   * Add option for not generating the hyperlink on stuff that looks like a
line 20: "     URL? Or just color the link to fit with the colorscheme (and only special
line 21: "     when hovering)?
line 22: "   * Bug: Opera does not allow printing more than one page if uncopyable
line 23: "     regions is turned on. Possible solution: Add normal text line numbers with
line 24: "     display:none, set to display:inline for print style sheets, and hide
line 25: "     <input> elements for print, to allow Opera printing multiple pages (and
line 26: "     other uncopyable areas?). May need to make the new text invisible to IE
line 27: "     with conditional comments to prevent copying it, IE for some reason likes
line 28: "     to copy hidden text. Other browsers too?
line 29: "   * Bug: still a 1px gap throughout the fold column when html_prevent_copy is
line 30: "     "fn" in some browsers. Specifically, in Chromium on Ubuntu (but not Chrome
line 31: "     on Windows). Perhaps it is font related?
line 32: "   * Bug: still some gaps in the fold column when html_prevent_copy contains
line 33: "     'd' and showing the whole diff (observed in multiple browsers). Only gaps
line 34: "     on diff lines though.
line 35: "   * Undercurl support via CSS3, with fallback to dotted or something:
line 36: "^Ihttps://groups.google.com/d/topic/vim_use/BzXA6He1pHg/discussion
line 37: "   * Redo updates for modified default foldtext (v11) when/if the patch is
line 38: "     accepted to modify it.
line 39: "   * Test case +diff_one_file-dynamic_folds+expand_tabs-hover_unfold
line 40: "^I^I+ignore_conceal-ignore_folding+no_foldcolumn+no_pre+no_progress
line 41: "^I^I+number_lines-pre_wrap-use_css+use_xhtml+whole_filler.xhtml
line 42: "     does not show the whole diff filler as it is supposed to?
line 43: "   * Bug: when 'isprint' is wrong for the current encoding, will generate
line 44: "     invalid content. Can/should anything be done about this? Maybe a separate
line 45: "     plugin to correct 'isprint' based on encoding?
line 46: "   * Check to see if the windows-125\d encodings actually work in Unix without
line 47: "     the 8bit- prefix. Add prefix to autoload dictionaries for Unix if not.
line 48: "   * Font auto-detection similar to
line 49: "     http://www.vim.org/scripts/script.php?script_id=2384 but for a variety of
line 50: "     platforms.
line 51: "   * Error thrown when sourcing 2html.vim directly when plugins are not loaded.
line 52: "   * Pull in code from http://www.vim.org/scripts/script.php?script_id=3113 :
line 53: "^I- listchars support
line 54: "^I- full-line background highlight
line 55: "^I- other?
line 56: "   * Make it so deleted lines in a diff don't create side-scrolling (get it
line 57: "     free with full-line background highlight above).
line 58: "   * Restore open/closed folds and cursor position after processing each file
line 59: "     with option not to restore for speed increase.
line 60: "   * Add extra meta info (generation time, etc.)?
line 61: "   * Tidy up so we can use strict doctype in even more situations
line 62: "   * Implementation detail: add threshold for writing the lines to the html
line 63: "     buffer before we're done (5000 or so lines should do it)
line 64: "   * TODO comments for code cleanup scattered throughout
line 65: "}}}
line 66: 
line 67: if exists('g:loaded_2html_plugin')
line 68:   finish
line 69: endif
line 70: let g:loaded_2html_plugin = 'vim7.4_v2'
line 71: 
line 72: "
line 73: " Changelog: {{{
line 74: "   7.4_v2  (this version): Fix error raised when converting a diff containing
line 75: "                           an empty buffer. Jan Stocker: allow g:html_font to
line 76: "                           take a list so it is easier to specfiy fallback
line 77: "                           fonts in the generated CSS.
line 78: "   7.4_v1  (Vim 7.4.0000): Fix modeline mangling for new "Vim:" format, and
line 79: "^I^I^I    also for version-specific modelines like "vim>703:".
line 80: "
line 81: "   7.3 updates: {{{
line 82: "   7.3_v14 (Vim 7.3.1246): Allow suppressing line number anchors using
line 83: "^I^I^I    g:html_line_ids=0. Allow customizing
line 84: "^I^I^I    important IDs (like line IDs and fold IDs) using
line 85: "^I^I^I    g:html_id_expr evalutated when the buffer conversion
line 86: "^I^I^I    is started.
line 87: "   7.3_v13 (Vim 7.3.1088): Keep foldmethod at manual in the generated file and
line 88: "^I^I^I    insert modeline to set it to manual.
line 89: "^I^I^I    Fix bug: diff mode with 2 unsaved buffers creates a
line 90: "^I^I^I    duplicate of one buffer instead of including both.
line 91: "^I^I^I    Add anchors to each line so you can put '#L123'
line 92: "^I^I^I    or '#123' at the end of the URL to jump to line 123
line 93: "^I^I^I    (idea by Andy Spencer). Add javascript to open folds
line 94: "^I^I^I    to show the anchor being jumped to if it is hidden.
line 95: "^I^I^I    Fix XML validation error: &nsbp; not part of XML.
line 96: "^I^I^I    Allow TOhtml to chain together with other commands
line 97: "^I^I^I    using |.
line 98: "   7.3_v12 (Vim 7.3.0616): Fix modeline mangling to also work for when multiple
line 99: "^I^I^I    highlight groups make up the start-of-modeline text.
line 100: "^I^I^I    Improve render time of page with uncopyable regions
line 101: "^I^I^I    by not using one-input-per-char. Change name of
line 102: "^I^I^I    uncopyable option from html_unselectable to
line 103: "^I^I^I    html_prevent_copy. Added html_no_invalid option and
line 104: "^I^I^I    default to inserting invalid markup for uncopyable
line 105: "^I^I^I    regions to prevent MS Word from pasting undeletable
line 106: "^I^I^I    <input> elements. Fix 'cpo' handling (Thilo Six).
line 107: "^I^I 7.3_v12b1: Add html_unselectable option. Rework logic to
line 108: "^I^I^I    eliminate post-processing substitute commands in
line 109: "^I^I^I    favor of doing the work up front. Remove unnecessary
line 110: "^I^I^I    special treatment of 'LineNr' highlight group. Minor
line 111: "^I^I^I    speed improvements. Fix modeline mangling in
line 112: "^I^I^I    generated output so it works for text in the first
line 113: "^I^I^I    column. Fix missing line number and fold column in
line 114: "^I^I^I    diff filler lines. Fix that some fonts have a 1px
line 115: "^I^I^I    gap (using a dirty hack, improvements welcome). Add
line 116: "^I^I^I    "colorscheme" meta tag. Does NOT include support for
line 117: "^I^I^I    the new default foldtext added in v11, as the patch
line 118: "^I^I^I    adding it has not yet been included in Vim.
line 119: "   7.3_v11 ( unreleased ): Support new default foldtext from patch by Christian
line 120: "^I^I^I    Brabandt in
line 121: "^I^I^I    http://groups.google.com/d/topic/vim_dev/B6FSGfq9VoI/discussion.
line 122: "^I^I^I    This patch has not yet been included in Vim, thus
line 123: "^I^I^I    these changes are removed in the next version.
line 124: "   7.3_v10 (Vim 7.3.0227): Fix error E684 when converting a range wholly inside
line 125: "^I^I^I    multiple nested folds with dynamic folding on.
line 126: "^I^I^I    Also fix problem with foldtext in this situation.
line 127: "   7.3_v9  (Vim 7.3.0170): Add html_pre_wrap option active with html_use_css
line 128: "^I^I^I    and without html_no_pre, default value same as
line 129: "^I^I^I    'wrap' option, (Andy Spencer). Don't use
line 130: "^I^I^I    'fileencoding' for converted document encoding if
line 131: "^I^I^I    'buftype' indicates a special buffer which isn't
line 132: "^I^I^I    written.
line 133: "   7.3_v8  (Vim 7.3.0100): Add html_expand_tabs option to allow leaving tab
line 134: "^I^I^I    characters in generated output (Andy Spencer).
line 135: "^I^I^I    Escape text that looks like a modeline so Vim
line 136: "^I^I^I    doesn't use anything in the converted HTML as a
line 137: "^I^I^I    modeline. Bugfixes: Fix folding when a fold starts
line 138: "^I^I^I    before the conversion range. Remove fold column when
line 139: "^I^I^I    there are no folds.
line 140: "   7.3_v7  (Vim 7-3-0063): see betas released on vim_dev below:
line 141: "^I^I  7.3_v7b3: Fixed bug, convert Unicode to UTF-8 all the way.
line 142: "^I^I  7.3_v7b2: Remove automatic detection of encodings that are not
line 143: "^I^I^I    supported by all major browsers according to
line 144: "^I^I^I    http://wiki.whatwg.org/wiki/Web_Encodings and
line 145: "^I^I^I    convert to UTF-8 for all Unicode encodings. Make
line 146: "^I^I^I    HTML encoding to Vim encoding detection be
line 147: "^I^I^I    case-insensitive for built-in pairs.
line 148: "^I^I  7.3_v7b1: Remove use of setwinvar() function which cannot be
line 149: "^I^I^I    called in restricted mode (Andy Spencer). Use
line 150: "^I^I^I    'fencoding' instead of 'encoding' to determine by
line 151: "^I^I^I    charset, and make sure the 'fenc' of the generated
line 152: "^I^I^I    file matches its indicated charset. Add charsets for
line 153: "^I^I^I    all of Vim's natively supported encodings.
line 154: "   7.3_v6  (Vim 7.3.0000): Really fix bug with 'nowrapscan', 'magic' and other
line 155: "^I^I^I    user settings interfering with diff mode generation,
line 156: "^I^I^I    trailing whitespace (e.g. line number column) when
line 157: "^I^I^I    using html_no_pre, and bugs when using
line 158: "^I^I^I    html_hover_unfold.
line 159: "   7.3_v5  ( unreleased ): Fix bug with 'nowrapscan' and also with out-of-sync
line 160: "^I^I^I    folds in diff mode when first line was folded.
line 161: "   7.3_v4  (Vim 7.3.0000): Bugfixes, especially for xhtml markup, and diff mode
line 162: "   7.3_v3  (Vim 7.3.0000): Refactor option handling and make html_use_css
line 163: "^I^I^I    default to true when not set to anything. Use strict
line 164: "^I^I^I    doctypes where possible. Rename use_xhtml option to
line 165: "^I^I^I    html_use_xhtml for consistency. Use .xhtml extension
line 166: "^I^I^I    when using this option. Add meta tag for settings.
line 167: "   7.3_v2  (Vim 7.3.0000): Fix syntax highlighting in diff mode to use both the
line 168: "^I^I^I    diff colors and the normal syntax colors
line 169: "   7.3_v1  (Vim 7.3.0000): Add conceal support and meta tags in output
line 170: "}}}
line 171: "}}}
line 172: 
line 173: " Define the :TOhtml command when:
line 174: " - 'compatible' is not set
line 175: " - this plugin was not already loaded
line 176: " - user commands are available. {{{
line 177: if !&cp && !exists(":TOhtml") && has("user_commands")
line 178:   command -range=% -bar TOhtml :call tohtml#Convert2HTML(<line1>, <line2>)
line 179: endif "}}}
line 180: 
line 181: " Make sure any patches will probably use consistent indent
line 182: "   vim: ts=8 sw=2 sts=2 noet fdm=marker
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/tohtml.vim
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/vimballPlugin.vim"
line 1: " vimballPlugin : construct a file containing both paths and files
line 2: " Author: Charles E. Campbell
line 3: " Copyright: (c) 2004-2014 by Charles E. Campbell
line 4: "            The VIM LICENSE applies to Vimball.vim, and Vimball.txt
line 5: "            (see |copyright|) except use "Vimball" instead of "Vim".
line 6: "            No warranty, express or implied.
line 7: "  *** ***   Use At-Your-Own-Risk!   *** ***
line 8: "
line 9: " (Rom 2:1 WEB) Therefore you are without excuse, O man, whoever you are who
line 10: "      judge. For in that which you judge another, you condemn yourself. For
line 11: "      you who judge practice the same things.
line 12: " GetLatestVimScripts: 1502 1 :AutoInstall: vimball.vim
line 13: 
line 14: " ---------------------------------------------------------------------
line 15: "  Load Once: {{{1
line 16: if &cp || exists("g:loaded_vimballPlugin")
line 17:  finish
line 18: endif
line 19: let g:loaded_vimballPlugin = "v37"
line 20: let s:keepcpo              = &cpo
line 21: set cpo&vim
line 22: 
line 23: " ------------------------------------------------------------------------------
line 24: " Public Interface: {{{1
line 25: com! -range   -complete=file -nargs=+ -bang MkVimball^I^Icall vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)
line 26: com! -nargs=? -complete=dir  UseVimball^I^I^I^I^I^Icall vimball#Vimball(1,<f-args>)
line 27: com! -nargs=0                VimballList^I^I^I^I^Icall vimball#Vimball(0)
line 28: com! -nargs=* -complete=dir  RmVimball^I^I^I^I^I^Icall vimball#SaveSettings()|call vimball#RmVimball(<f-args>)|call vimball#RestoreSettings()
line 29: augroup Vimball
line 30:  au!
line 31:  au BufEnter  *.vba,*.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^Isetlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|if line('$') > 1|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")|endif
line 32:  au SourceCmd *.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^I^I^Ilet s:origfile=expand("%")|if expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if s:origfile!=expand("<afile>")|close|endif
line 33:  au SourceCmd *.vba^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif
line 34:  au BufEnter  *.vmb,*.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^Isetlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|if line('$') > 1|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")|endif
line 35:  au SourceCmd *.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^I^I^Ilet s:origfile=expand("%")|if expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if s:origfile!=expand("<afile>")|close|endif
line 36:  au SourceCmd *.vmb^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif
line 37: augroup END
line 38: 
line 39: " =====================================================================
line 40: " Restoration And Modelines: {{{1
line 41: " vim: fdm=marker
line 42: let &cpo= s:keepcpo
line 43: unlet s:keepcpo
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/vimballPlugin.vim
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/zipPlugin.vim"
line 1: " zipPlugin.vim: Handles browsing zipfiles
line 2: "            PLUGIN PORTION
line 3: " Date:^I^I^ISep 13, 2016
line 4: " Maintainer:^ICharles E Campbell <NdrOchip@ScampbellPfamily.AbizM-NOSPAM>
line 5: " License:^I^IVim License  (see vim's :help license)
line 6: " Copyright:    Copyright (C) 2005-2016 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like anything else that's free,
line 10: "               zipPlugin.vim is provided *as is* and comes with no warranty
line 11: "               of any kind, either expressed or implied. By using this
line 12: "               plugin, you agree that in no event will the copyright
line 13: "               holder be liable for any damages resulting from the use
line 14: "               of this software.
line 15: "
line 16: " (James 4:8 WEB) Draw near to God, and he will draw near to you.
line 17: " Cleanse your hands, you sinners; and purify your hearts, you double-minded.
line 18: " ---------------------------------------------------------------------
line 19: " Load Once: {{{1
line 20: if &cp || exists("g:loaded_zipPlugin")
line 21:  finish
line 22: endif
line 23: let g:loaded_zipPlugin = "v28"
line 24: let s:keepcpo          = &cpo
line 25: set cpo&vim
line 26: 
line 27: " ---------------------------------------------------------------------
line 28: " Options: {{{1
line 29: if !exists("g:zipPlugin_ext")
line 30:  let g:zipPlugin_ext='*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip'
line 31: endif
line 32: 
line 33: " ---------------------------------------------------------------------
line 34: " Public Interface: {{{1
line 35: augroup zip
line 36:  au!
line 37:  au BufReadCmd   zipfile:*^Icall zip#Read(expand("<amatch>"), 1)
line 38:  au FileReadCmd  zipfile:*^Icall zip#Read(expand("<amatch>"), 0)
line 39:  au BufWriteCmd  zipfile:*^Icall zip#Write(expand("<amatch>"))
line 40:  au FileWriteCmd zipfile:*^Icall zip#Write(expand("<amatch>"))
line 41: 
line 42:  if has("unix")
line 43:   au BufReadCmd   zipfile:*/*^Icall zip#Read(expand("<amatch>"), 1)
line 44:   au FileReadCmd  zipfile:*/*^Icall zip#Read(expand("<amatch>"), 0)
line 45:   au BufWriteCmd  zipfile:*/*^Icall zip#Write(expand("<amatch>"))
line 46:   au FileWriteCmd zipfile:*/*^Icall zip#Write(expand("<amatch>"))
line 47:  endif
line 48: 
line 49:  exe "au BufReadCmd ".g:zipPlugin_ext.' call zip#Browse(expand("<amatch>"))'
line 49: au BufReadCmd *.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip call zip#Browse(expand("<amatch>"))
line 50: augroup END
line 51: 
line 52: " ---------------------------------------------------------------------
line 53: "  Restoration And Modelines: {{{1
line 54: "  vim: fdm=marker
line 55: let &cpo= s:keepcpo
line 56: unlet s:keepcpo
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/plugin/zipPlugin.vim
Searching for "/Users/marco/.vim/bundle/Vundle.vim/plugin/**/*.vim"
Searching for "pack/*/start/*" in "/Users/marco/.vim,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/marco/.vim/after"
Searching for "/Users/marco/.vim/pack/*/start/*"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/start/*"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/pack/*/start/*"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/start/*"
Searching for "/Users/marco/.vim/after/pack/*/start/*"
not found in 'packpath': "pack/*/start/*"
Searching for "plugin/**/*.vim" in "/Users/marco/.vim,/Users/marco/.vim/bundle/vim-prettier,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/marco/.vim/after,/Users/marco/.vim/bundle/Vundle.vim,/Users/marco/.vim/bundle/vim-prettier/after"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after/plugin/**/*.vim"
Searching for "/Users/marco/.vim/after/plugin/**/*.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/after/plugin/**/*.vim"
not found in 'runtimepath': "plugin/**/*.vim"
Reading viminfo file "/Users/marco/.viminfo" info oldfiles
"crash.js" 
"crash.js" 563L, 19666C
Reading viminfo file "/Users/marco/.viminfo" marks
Executing BufRead Auto commands for "*.js"
autocommand setf javascript

line 0: setf javascript
Executing FileType Auto commands for "*"
autocommand call s:LoadFTPlugin()

line 0: call s:LoadFTPlugin()
calling function <SNR>15_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17: ^Iexe 'runtime! ftplugin/' . name . '.vim ftplugin/' . name . '_*.vim ftplugin/' . name . '/*.vim'
line 17: runtime! ftplugin/javascript.vim ftplugin/javascript_*.vim ftplugin/javascript/*.vim
Searching for "ftplugin/javascript.vim ftplugin/javascript_*.vim ftplugin/javascript/*.vim" in "/Users/marco/.vim,/Users/marco/.vim/bundle/vim-prettier,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/marco/.vim/after,/Users/marco/.vim/bundle/Vundle.vim,/Users/marco/.vim/bundle/vim-prettier/after"
Searching for "/Users/marco/.vim/ftplugin/javascript.vim"
Searching for "/Users/marco/.vim/ftplugin/javascript_*.vim"
Searching for "/Users/marco/.vim/ftplugin/javascript/*.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/ftplugin/javascript.vim"
chdir(/Users/marco/.vim/bundle/vim-prettier/ftplugin)
fchdir() to previous dir
line 17: sourcing "/Users/marco/.vim/bundle/vim-prettier/ftplugin/javascript.vim"
line 1: augroup Prettier
line 2:   autocmd!
line 3:   if g:prettier#autoformat
line 4:     autocmd BufWritePre *.js,*.jsx,*.mjs call prettier#Autoformat()
line 5:   endif
line 6: augroup end
finished sourcing /Users/marco/.vim/bundle/vim-prettier/ftplugin/javascript.vim
continuing in function <SNR>15_LoadFTPlugin
Searching for "/Users/marco/.vim/bundle/vim-prettier/ftplugin/javascript_*.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/ftplugin/javascript/*.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/ftplugin/javascript.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/ftplugin/javascript_*.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/ftplugin/javascript/*.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/ftplugin/javascript.vim"
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/ftplugin)
fchdir() to previous dir
line 17: sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/ftplugin/javascript.vim"
line 1: " Vim filetype plugin file
line 2: " Language:^IJavascript
line 3: " Maintainer:^IDoug Kearns <dougkearns@gmail.com>
line 4: " Last Change:  2008 Jun 15
line 5: " URL:^I^Ihttp://gus.gscit.monash.edu.au/~djkea2/vim/ftplugin/javascript.vim
line 6: 
line 7: if exists("b:did_ftplugin")
line 8:   finish
line 9: endif
line 10: let b:did_ftplugin = 1
line 11: 
line 12: let s:cpo_save = &cpo
line 13: set cpo-=C
line 14: 
line 15: " Set 'formatoptions' to break comment lines but not other lines,
line 16: " " and insert the comment leader when hitting <CR> or using "o".
line 17: setlocal formatoptions-=t formatoptions+=croql
line 18: 
line 19: " Set completion with CTRL-X CTRL-O to autoloaded function.
line 20: if exists('&ofu')
line 21:     setlocal omnifunc=javascriptcomplete#CompleteJS
line 22: endif
line 23: 
line 24: " Set 'comments' to format dashed lists in comments.
line 25: setlocal comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://
line 26: 
line 27: setlocal commentstring=//%s
line 28: 
line 29: " Change the :browse e filter to primarily show Java-related files.
line 30: if has("gui_win32")
line 32:     let  b:browsefilter="Javascript Files (*.js)\t*.js\n" .^I"All Files (*.*)\t*.*\n"
line 33: endif
line 34:        
line 35: let b:undo_ftplugin = "setl fo< ofu< com< cms<" 
line 36: 
line 37: let &cpo = s:cpo_save
line 38: unlet s:cpo_save
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/ftplugin/javascript.vim
continuing in function <SNR>15_LoadFTPlugin
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/ftplugin/javascript_*.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/ftplugin/javascript/*.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after/ftplugin/javascript.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after/ftplugin/javascript_*.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after/ftplugin/javascript/*.vim"
Searching for "/Users/marco/.vim/after/ftplugin/javascript.vim"
Searching for "/Users/marco/.vim/after/ftplugin/javascript_*.vim"
Searching for "/Users/marco/.vim/after/ftplugin/javascript/*.vim"
Searching for "/Users/marco/.vim/bundle/Vundle.vim/ftplugin/javascript.vim"
Searching for "/Users/marco/.vim/bundle/Vundle.vim/ftplugin/javascript_*.vim"
Searching for "/Users/marco/.vim/bundle/Vundle.vim/ftplugin/javascript/*.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/after/ftplugin/javascript.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/after/ftplugin/javascript_*.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/after/ftplugin/javascript/*.vim"
line 18:       endfor
line 16:       for name in split(s, '\.')
line 17: ^Iexe 'runtime! ftplugin/' . name . '.vim ftplugin/' . name . '_*.vim ftplugin/' . name . '/*.vim'
line 18:       endfor
line 19:     endif
function <SNR>15_LoadFTPlugin returning #0

continuing in FileType Auto commands for "*"

Executing FileType Auto commands for "*"
autocommand call s:LoadIndent()

line 0: call s:LoadIndent()
calling function <SNR>16_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14: ^Iexe 'runtime! indent/' . name . '.vim'
line 14: runtime! indent/javascript.vim
Searching for "indent/javascript.vim" in "/Users/marco/.vim,/Users/marco/.vim/bundle/vim-prettier,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/marco/.vim/after,/Users/marco/.vim/bundle/Vundle.vim,/Users/marco/.vim/bundle/vim-prettier/after"
Searching for "/Users/marco/.vim/indent/javascript.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/indent/javascript.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/indent/javascript.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/indent/javascript.vim"
chdir(/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/indent)
fchdir() to previous dir
line 14: sourcing "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/indent/javascript.vim"
line 1: " Vim indent file
line 2: " Language: Javascript
line 3: " Maintainer: Chris Paul ( https://github.com/bounceme )
line 4: " URL: https://github.com/pangloss/vim-javascript
line 5: " Last Change: December 4, 2017
line 6: 
line 7: " Only load this indent file when no other was loaded.
line 8: if exists('b:did_indent')
line 9:   finish
line 10: endif
line 11: let b:did_indent = 1
line 12: 
line 13: " Now, set up our indentation expression and keys that trigger it.
line 14: setlocal indentexpr=GetJavascriptIndent()
line 15: setlocal autoindent nolisp nosmartindent
line 16: setlocal indentkeys+=0],0)
line 17: " Testable with something like:
line 18: " vim  -eNs "+filetype plugin indent on" "+syntax on" "+set ft=javascript" \
line 19: "       "+norm! gg=G" '+%print' '+:q!' testfile.js \
line 20: "       | diff -uBZ testfile.js -
line 21: 
line 22: let b:undo_indent = 'setlocal indentexpr< smartindent< autoindent< indentkeys<'
line 23: 
line 24: " Only define the function once.
line 25: if exists('*GetJavascriptIndent')
line 26:   finish
line 27: endif
line 28: 
line 29: let s:cpo_save = &cpo
line 30: set cpo&vim
line 31: 
line 32: " indent correctly if inside <script>
line 33: " vim/vim@690afe1 for the switch from cindent
line 34: " overridden with b:html_indent_script1
line 35: call extend(g:,{'html_indent_script1': 'inc'},'keep')
line 36: 
line 37: " Regex of syntax group names that are or delimit string or are comments.
line 40: let s:bvars = { 'syng_strcom': 'string\|comment\|regex\|special\|doc\|template\%(braces\)\@!', 'syng_str': 'string\|template\|special' }
line 41: " template strings may want to be excluded when editing graphql:
line 42: " au! Filetype javascript let b:syng_str = '^\%(.*template\)\@!.*string\|special'
line 43: " au! Filetype javascript let b:syng_strcom = '^\%(.*template\)\@!.*string\|comment\|regex\|special\|doc'
line 44: 
line 45: function s:GetVars()
line 48: 
line 49: " Get shiftwidth value
line 50: if exists('*shiftwidth')
line 51:   function s:sw()
line 54: else
line 55:   function s:sw()
line 58: endif
line 59: 
line 60: " Performance for forwards search(): start search at pos rather than masking
line 61: " matches before pos.
line 62: let s:z = has('patch-7.4.984') ? 'z' : ''
line 63: 
line 64: " Expression used to check whether we should skip a match with searchpair().
line 65: let s:skip_expr = "s:SynAt(line('.'),col('.')) =~? b:syng_strcom"
line 66: let s:in_comm = s:skip_expr[:-14] . "'comment\\|doc'"
line 67: 
line 68: let s:rel = has('reltime')
line 69: " searchpair() wrapper
line 70: if s:rel
line 71:   function s:GetPair(start,end,flags,skip)
line 74: else
line 75:   function s:GetPair(start,end,flags,skip)
line 78: endif
line 79: 
line 80: function s:SynAt(l,c)
line 88: 
line 89: function s:ParseCino(f)
line 107: 
line 108: " Optimized {skip} expr, only callable from the search loop which
line 109: " GetJavascriptIndent does to find the containing [[{(] (side-effects)
line 110: function s:SkipFunc()
line 132: 
line 133: function s:AlternatePair()
line 156: 
line 157: function s:Nat(int)
line 160: 
line 161: function s:LookingAt()
line 164: 
line 165: function s:Token()
line 168: 
line 169: function s:PreviousToken(...)
line 193: 
line 194: function s:Pure(f,...)
line 197: 
line 198: function s:SearchLoop(pat,flags,expr)
line 201: 
line 202: function s:ExprCol()
line 228: 
line 229: " configurable regexes that define continuation lines, not including (, {, or [.
line 231: let s:opfirst = '^' . get(g:,'javascript_opfirst', '\C\%([<>=,.?^%|/&]\|\([-:+]\)\1\@!\|\*\+\|!=\|in\%(stanceof\)\=\>\)')
line 233: let s:continuation = get(g:,'javascript_continuation', '\C\%([<=,.~!?/*^%|&:]\|+\@<!+\|-\@<!-\|=\@<!>\|\<\%(typeof\|new\|delete\|void\|in\|instanceof\|await\)\)') . '$'
line 234: 
line 235: function s:Continues()
line 244: 
line 245: " Check if line 'lnum' has a balanced amount of parentheses.
line 246: function s:Balanced(lnum,line)
line 261: 
line 262: function s:OneScope()
line 278: 
line 279: function s:DoWhile()
line 295: 
line 296: " returns total offset from braceless contexts. 'num' is the lineNr which
line 297: " encloses the entire context, 'cont' if whether a:firstline is a continued
line 298: " expression, which could have started in a braceless context
line 299: function s:IsContOne(cont)
line 318: 
line 319: function s:IsSwitch()
line 323: 
line 324: " https://github.com/sweet-js/sweet.js/wiki/design#give-lookbehind-to-the-reader
line 325: function s:IsBlock()
line 351: 
line 352: function GetJavascriptIndent()
line 478: 
line 479: let &cpo = s:cpo_save
line 480: unlet s:cpo_save
finished sourcing /usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime/indent/javascript.vim
continuing in function <SNR>16_LoadIndent
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after/indent/javascript.vim"
Searching for "/Users/marco/.vim/after/indent/javascript.vim"
Searching for "/Users/marco/.vim/bundle/Vundle.vim/indent/javascript.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/after/indent/javascript.vim"
line 15:       endfor
line 13:       for name in split(s, '\.')
line 14: ^Iexe 'runtime! indent/' . name . '.vim'
line 15:       endfor
line 16:     endif
function <SNR>16_LoadIndent returning #0

continuing in FileType Auto commands for "*"

Executing FileType Auto commands for "*"
autocommand exe "set syntax=" . expand("<amatch>")

line 0: exe "set syntax=" . expand("<amatch>")
line 0: set syntax=javascript
Executing Syntax Auto commands for "*"
autocommand call s:SynSet()

line 0: call s:SynSet()
calling function <SNR>18_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.
line 23:     for name in split(s, '\.')
line 24:       exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 24: runtime! syntax/javascript.vim syntax/javascript/*.vim
Searching for "syntax/javascript.vim syntax/javascript/*.vim" in "/Users/marco/.vim,/Users/marco/.vim/bundle/vim-prettier,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/runtime,/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/marco/.vim/after,/Users/marco/.vim/bundle/Vundle.vim,/Users/marco/.vim/bundle/vim-prettier/after"
Searching for "/Users/marco/.vim/syntax/javascript.vim"
Searching for "/Users/marco/.vim/syntax/javascript/*.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/syntax/javascript.vim"
Searching for "/Users/marco/.vim/bundle/vim-prettier/syntax/javascript/*.vim"
Searching for "/usr/local/Cellar/macvim/8.0-146_1/MacVim.app/Contents/Resources/vim/vimfiles/syntax/javascript.